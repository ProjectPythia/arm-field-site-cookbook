{"version":"1","records":[{"hierarchy":{"lvl1":"ARM Field Site Cookbook"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"ARM Field Site Cookbook"},"content":"\n\n\n\n\n\n\n\n\n\nThis Project Pythia Cookbook covers how to work with ARM Field Campaign datasets, leveraging previous training and outreach event materials.","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl2":"Motivation"},"type":"lvl2","url":"/#motivation","position":2},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl2":"Motivation"},"content":"We consolidate computational workflow training materials from previous summer school and workshop events. There is a foundations section which details the core open-source tools, and a projects section showcasing previous students’ workflows with the associated citation information.","type":"content","url":"/#motivation","position":3},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl2":"Authors"},"type":"lvl2","url":"/#authors","position":4},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl2":"Authors"},"content":"Max Grover","type":"content","url":"/#authors","position":5},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl3":"Contributors","lvl2":"Authors"},"type":"lvl3","url":"/#contributors","position":6},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl3":"Contributors","lvl2":"Authors"},"content":"","type":"content","url":"/#contributors","position":7},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl2":"Structure"},"type":"lvl2","url":"/#structure","position":8},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl2":"Structure"},"content":"","type":"content","url":"/#structure","position":9},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl3":"Foundations","lvl2":"Structure"},"type":"lvl3","url":"/#foundations","position":10},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl3":"Foundations","lvl2":"Structure"},"content":"This section is dedicated to the core open-source tools which are used in the associated projects. We also include data access information in this section.","type":"content","url":"/#foundations","position":11},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl3":"Projects","lvl2":"Structure"},"type":"lvl3","url":"/#projects","position":12},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl3":"Projects","lvl2":"Structure"},"content":"Project notebooks from previous training events are included in this section. We apply additional cleaning and reproducibility work that could not be finalized during the week-long events.","type":"content","url":"/#projects","position":13},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl2":"Running the Notebooks"},"type":"lvl2","url":"/#running-the-notebooks","position":14},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl2":"Running the Notebooks"},"content":"You can either run the notebook using \n\nBinder or on your local machine.","type":"content","url":"/#running-the-notebooks","position":15},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-binder","position":16},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"content":"The simplest way to interact with a Jupyter Notebook is through\n\n\nBinder, which enables the execution of a\n\n\nJupyter Book in the cloud. The details of how this works are not\nimportant for now. All you need to know is how to launch a Pythia\nCookbooks chapter via Binder. Simply navigate your mouse to\nthe top right corner of the book chapter you are viewing and click\non the rocket ship icon, (see figure below), and be sure to select\n“launch Binder”. After a moment you should be presented with a\nnotebook that you can interact with. I.e. you’ll be able to execute\nand even change the example programs. You’ll see that the code cells\nhave no output at first, until you execute them by pressing\nShift+Enter. Complete details on how to interact with\na live Jupyter notebook are described in \n\nGetting Started with\nJupyter.\n\nNote, not all Cookbook chapters are executable. If you do not see\nthe rocket ship icon, such as on this page, you are not viewing an\nexecutable book chapter.","type":"content","url":"/#running-on-binder","position":17},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-your-own-machine","position":18},{"hierarchy":{"lvl1":"ARM Field Site Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"content":"If you are interested in running this material locally on your computer, you will need to follow this workflow:\n\n(Replace “cookbook-example” with the title of your cookbooks)\n\nClone the https://github.com/mgrover1/arm-field-site-cookbook repository: git clone https://github.com/mgrover1/arm-field-site-cookbook.git\n\nMove into the arm-field-site-cookbook directorycd arm-field-site-cookbook\n\nCreate and activate your conda environment from the environment.yml fileconda env create -f environment.yml\nconda activate arm-field-site-cookbook-dev\n\nMove into the foundations directory and start up Jupyterlabcd foundations\njupyter lab","type":"content","url":"/#running-on-your-own-machine","position":19},{"hierarchy":{"lvl1":"ACT Basics with BNF"},"type":"lvl1","url":"/foundations/act/act-basics-bnf","position":0},{"hierarchy":{"lvl1":"ACT Basics with BNF"},"content":"\n\n","type":"content","url":"/foundations/act/act-basics-bnf","position":1},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl2":"Atmospheric Radiation Measurement user facility (ARM)"},"type":"lvl2","url":"/foundations/act/act-basics-bnf#atmospheric-radiation-measurement-user-facility-arm","position":2},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl2":"Atmospheric Radiation Measurement user facility (ARM)"},"content":"","type":"content","url":"/foundations/act/act-basics-bnf#atmospheric-radiation-measurement-user-facility-arm","position":3},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl2","url":"/foundations/act/act-basics-bnf#bankhead-national-forest-bnf","position":4},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl2":"Bankhead National Forest (BNF)"},"content":"Notebook for learning the basics of ACT with BNF data Corresponding Author: Adam Theisen (atheisen@anl.gov)\n\n","type":"content","url":"/foundations/act/act-basics-bnf#bankhead-national-forest-bnf","position":5},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Overview","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl3","url":"/foundations/act/act-basics-bnf#overview","position":6},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Overview","lvl2":"Bankhead National Forest (BNF)"},"content":"The third ARM Mobile Facility (AMF3) has deployed to Bankhead National Forest in northern Alabama, opening October 1, 2024.  For at least five years, the BNF will investigate the complex interactions among clouds, vegetation, and aerosols suspended in the atmosphere.  This will be done using the instrumentation at the main site, 43-meter tower site, and three supplemental sites in the region.  This tutorial will provide an introduction to ACT using the BNF data.\n\nIntro to ACT\n\nInstrument Overview\n\nDownloading and Reading in Data\n\nQuality Controlling Data\n\nVisualizing Data\n\n","type":"content","url":"/foundations/act/act-basics-bnf#overview","position":7},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Prerequisites","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl3","url":"/foundations/act/act-basics-bnf#prerequisites","position":8},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Prerequisites","lvl2":"Bankhead National Forest (BNF)"},"content":"This notebook will rely heavily on Python and the \n\nAtmospheric data Community Toolkit (ACT).  Don’t worry if you don’t have experience with either, this notebook will walk you though what you need to know.\n\nYou will also need an account and token to download data using the ARM Live webservice.  Navigate to the \n\nwebservice information page and log in to get your token.  Your account username will be your ARM username.\n\nConcepts\n\nImportance\n\nNotes\n\nACT\n\nHelpful\n\n\n\nTime to learn: 15 Minutes\n\nSystem requirements:\n\nPython 3.11 or latest\n\nACT v2.0.0 or latest\n\nnumpy\n\nxarray\n\nmatplotlib\n\n\n\n","type":"content","url":"/foundations/act/act-basics-bnf#prerequisites","position":9},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl3","url":"/foundations/act/act-basics-bnf#intro-to-act","position":10},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"content":"The \n\nAtmospheric data Community Toolkit (ACT) is an open-source Python toolkit for exploring and analyzing atmospheric time-series datasets.  Examples can be found in the \n\nACT Example Gallery.  The toolkit has modules for many different parts of the scientific process, including:\n\nEnhanced Skew-T plot from ARM’s Southern Great Plains Site (SGP)\n\n","type":"content","url":"/foundations/act/act-basics-bnf#intro-to-act","position":11},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Data Discovery (act.discovery)","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl5","url":"/foundations/act/act-basics-bnf#data-discovery-act-discovery","position":12},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Data Discovery (act.discovery)","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"content":"The \n\ndiscovery module houses functions to download or access data from different groups. Currently it includes function to get data for ARM, NOAA, EPA, NEON, and more!","type":"content","url":"/foundations/act/act-basics-bnf#data-discovery-act-discovery","position":13},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Input/Output (act.io)","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl5","url":"/foundations/act/act-basics-bnf#input-output-act-io","position":14},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Input/Output (act.io)","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"content":"io contains functions for reading and writing data from various sources and formats.","type":"content","url":"/foundations/act/act-basics-bnf#input-output-act-io","position":15},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Visualization (act.plotting)","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl5","url":"/foundations/act/act-basics-bnf#visualization-act-plotting","position":16},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Visualization (act.plotting)","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"content":"plotting contains various routines, built on matplotlib, to help visualize and explore data. These include\n\nTime-series plots\n\nDistribution plots like histograms and heatmaps\n\nGeographic plots for moving systems like radiosondes or aircraft\n\nSkew-T plots for radiosonde data, built off MetPy\n\nWind rose plots for wind and data roses\n\nCross-section plots for working with 3-dimensional data","type":"content","url":"/foundations/act/act-basics-bnf#visualization-act-plotting","position":17},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Corrections (act.corrections)","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl5","url":"/foundations/act/act-basics-bnf#corrections-act-corrections","position":18},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Corrections (act.corrections)","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"content":"corrections apply different corrections to data based on need. A majority of the existing corrections are for lidar data.","type":"content","url":"/foundations/act/act-basics-bnf#corrections-act-corrections","position":19},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Quality Control (act.qc)","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl5","url":"/foundations/act/act-basics-bnf#quality-control-act-qc","position":20},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Quality Control (act.qc)","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"content":"The \n\nqc module has a lot of functions for working with quality control information, apply new tests, or filtering data based on existing tests. We will explore some of that functionality in this notebook.","type":"content","url":"/foundations/act/act-basics-bnf#quality-control-act-qc","position":21},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Retrievals (act.retrievals)","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl5","url":"/foundations/act/act-basics-bnf#retrievals-act-retrievals","position":22},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Retrievals (act.retrievals)","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"content":"There are many cases in which some additional calculations are necessary to get more value from the instrument data. The \n\nretrievals module houses some functions for performing these advanced calculations.","type":"content","url":"/foundations/act/act-basics-bnf#retrievals-act-retrievals","position":23},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Utilities (act.utils)","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl5","url":"/foundations/act/act-basics-bnf#utilities-act-utils","position":24},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Utilities (act.utils)","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"content":"The \n\nutils module has a lot of general utilities to help with the data. Some of these include adding in a solar variable to indicate day/night (useful in filtering data), unit conversions, decoding WMO weather codes, performing weighted averaging, etc...\n\n\n\nARM and NEON data from Utquivaik, AK\n\n\n\n","type":"content","url":"/foundations/act/act-basics-bnf#utilities-act-utils","position":25},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Preparing for the Future","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl4","url":"/foundations/act/act-basics-bnf#preparing-for-the-future","position":26},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Preparing for the Future","lvl3":"Intro to ACT","lvl2":"Bankhead National Forest (BNF)"},"content":"Please take the survey to help us develop the third roadmap for ACT which helps to prioritize features and activities in ACT.\n\n\n\n\n\n","type":"content","url":"/foundations/act/act-basics-bnf#preparing-for-the-future","position":27},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Instrument Overview","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl3","url":"/foundations/act/act-basics-bnf#instrument-overview","position":28},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Instrument Overview","lvl2":"Bankhead National Forest (BNF)"},"content":"","type":"content","url":"/foundations/act/act-basics-bnf#instrument-overview","position":29},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Surface Meteorological Instrumentation (MET)","lvl3":"Instrument Overview","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl4","url":"/foundations/act/act-basics-bnf#surface-meteorological-instrumentation-met","position":30},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Surface Meteorological Instrumentation (MET)","lvl3":"Instrument Overview","lvl2":"Bankhead National Forest (BNF)"},"content":"The ARM Surface Meteorology Systems (MET) use mainly conventional in situ sensors to obtain 1-minute statistics of surface wind speed, wind direction, air temperature, relative humidity, barometric pressure, and rain-rate. \n\nLearn more","type":"content","url":"/foundations/act/act-basics-bnf#surface-meteorological-instrumentation-met","position":31},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Scanning mobility particle sizer (SMPS)","lvl3":"Instrument Overview","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl4","url":"/foundations/act/act-basics-bnf#scanning-mobility-particle-sizer-smps","position":32},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Scanning mobility particle sizer (SMPS)","lvl3":"Instrument Overview","lvl2":"Bankhead National Forest (BNF)"},"content":"The scanning mobility particle sizer (SMPS) is a particle size spectrometer that measures the aerosol number size distribution by sizing particles based on their electrical mobility diameter using a differential mobility analyzer (DMA) and by counting particles using a condensation particle counter (CPC). It measures aerosol concentration and aerosol particle size distribution. \n\nLearn more\n\n\n\nSurface Meteorology Station\n\n\n\n","type":"content","url":"/foundations/act/act-basics-bnf#scanning-mobility-particle-sizer-smps","position":33},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Imports","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl3","url":"/foundations/act/act-basics-bnf#imports","position":34},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Imports","lvl2":"Bankhead National Forest (BNF)"},"content":"Let’s get started with some data!  But first, we need to import some libraries.\n\nimport act\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\n\n","type":"content","url":"/foundations/act/act-basics-bnf#imports","position":35},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Downloading and Reading ARM’s NetCDF Data","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl3","url":"/foundations/act/act-basics-bnf#downloading-and-reading-arms-netcdf-data","position":36},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Downloading and Reading ARM’s NetCDF Data","lvl2":"Bankhead National Forest (BNF)"},"content":"ARM’s standard file format is NetCDF (network Common Data Form) which makes it very easy to work with in Python!  ARM data are available through a data portal called \n\nData Discovery or through a webservice.  If you didn’t get your username and token earlier, please go back and see the Prerequisites!\n\nLet’s download some of the MET data first!\n\n# Set your username and token here!\nusername = 'YourUserName'\ntoken = 'YourToken'\n\n# Set the datastream and start/enddates\ndatastream = 'bnfmetM1.b1'\nstartdate = '2024-12-16'\nenddate = '2024-12-19T23:59:59'\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult_met = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\n\ndatastream = 'bnfaossmpsM1.b1'\nresult_smps = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\n\n","type":"content","url":"/foundations/act/act-basics-bnf#downloading-and-reading-arms-netcdf-data","position":37},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Note: Did you notice the citation and DOI?","lvl3":"Downloading and Reading ARM’s NetCDF Data","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl4","url":"/foundations/act/act-basics-bnf#note-did-you-notice-the-citation-and-doi","position":38},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Note: Did you notice the citation and DOI?","lvl3":"Downloading and Reading ARM’s NetCDF Data","lvl2":"Bankhead National Forest (BNF)"},"content":"\n\n# Let's read in the data using ACT and check out the data\nds_met = act.io.read_arm_netcdf(result_met)\nds_smps = act.io.read_arm_netcdf(result_smps)\n\nds_met\n\n","type":"content","url":"/foundations/act/act-basics-bnf#note-did-you-notice-the-citation-and-doi","position":39},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Quality Controlling Data","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl3","url":"/foundations/act/act-basics-bnf#quality-controlling-data","position":40},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Quality Controlling Data","lvl2":"Bankhead National Forest (BNF)"},"content":"ARM has multiple methods that it uses to communicate data quality information out to the users.  One of these methods is through “embedded QC” variables.  These are variables within the file that have information on automated tests that have been applied.  Many times, they include Min, Max, and Delta tests but as is the case with the AOS instruments, there can be more complicated tests that are applied.\n\nThe results from all these different tests are stored in a single variable using bit-packed QC.  We won’t get into the full details here, but it’s a way to communicate the results of multiple tests in a single integer value by utilizing binary and bits!  You can learn more about bit-packed QC \n\nhere but ACT also has many of the tools for working with ARM QC.","type":"content","url":"/foundations/act/act-basics-bnf#quality-controlling-data","position":41},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Other Sources of Quality Control","lvl3":"Quality Controlling Data","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl5","url":"/foundations/act/act-basics-bnf#other-sources-of-quality-control","position":42},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl5":"Other Sources of Quality Control","lvl3":"Quality Controlling Data","lvl2":"Bankhead National Forest (BNF)"},"content":"ARM also communicates problems with the data quality through Data Quality Reports (DQR).  These reports are normally submitted by the instrument mentor when there’s been a problem with the instrument.  The categories include:\n\nData Quality Report Categories\n\nMissing: Data are not available or set to -9999\n\nSuspect: The data are not fully incorrect but there are problems that increases the uncertainty of the values. Data should be used with caution.\n\nBad: The data are incorrect and should not be used.\n\nNote: Data notes are a way to communicate information that would be useful to the end user but does not rise to the level of suspect or bad data\n\nAdditionally, data quality information can be found in the Instrument Handbooks, which are included on most instrument pages.  Here is an \n\nexample of the MET handbook.\n\n# We can see that there's some missing data in the plot above so let's take a look at the embedded QC!\n# First, for many of the ACT QC features, we need to get the dataset more to CF standard and that\n# involves cleaning up some of the attributes and ways that ARM has historically handled QC\nds_smps.clean.cleanup()\n\n# Query the ARM DQR Webservice\nvariable = 'total_N_conc'\nds_smps = act.qc.add_dqr_to_qc(ds_smps, variable=variable)\n\n# Next, let's take a look at visualizing the quality control information\n# Create a plotting display object with 2 plots\ndisplay = act.plotting.TimeSeriesDisplay(ds_smps, figsize=(15, 10), subplot_shape=(2,))\n\n# Plot up the variable in the first plot\ndisplay.plot(variable, subplot_index=(0,))\n\n# Plot up a day/night background\ndisplay.day_night_background(subplot_index=(0,))\n\n# Plot up the QC variable in the second plot\ndisplay.qc_flag_block_plot(variable, subplot_index=(1,))\nplt.show()\n\n","type":"content","url":"/foundations/act/act-basics-bnf#other-sources-of-quality-control","position":43},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Visualizing Data","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl3","url":"/foundations/act/act-basics-bnf#visualizing-data","position":44},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl3":"Visualizing Data","lvl2":"Bankhead National Forest (BNF)"},"content":"We’ve already worked with visualizing the data in basic ways but what other options are there in ACT?  This section will show you how to create a variety of different plots.  More plotting examples can be found in \n\nACT’s Documentation.\n\n","type":"content","url":"/foundations/act/act-basics-bnf#visualizing-data","position":45},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Multi-Panel Plot","lvl3":"Visualizing Data","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl4","url":"/foundations/act/act-basics-bnf#multi-panel-plot","position":46},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Multi-Panel Plot","lvl3":"Visualizing Data","lvl2":"Bankhead National Forest (BNF)"},"content":"This example shows how to plot the MET and SMPS together on a multi-panel plot.\n\n#And plot again!\n# Create a plotting display object with 2 plots\n# Note we have to create a dictionary of datasets to pass in\ndisplay = act.plotting.TimeSeriesDisplay({'SMPS': ds_smps, 'MET': ds_met}, figsize=(15, 10), subplot_shape=(2,))\n\n# Plot up the variable in the first plot\n# Need to specify the dsname so it knows which dataset\n# to use for this data.  This is helpful when datasets \n# have similar variable names\ndisplay.plot('dN_dlogDp', dsname='SMPS', subplot_index=(0,))\n\n# Plot up the MET btemperature and precipitation\ndisplay.plot('temp_mean', dsname='MET', subplot_index=(1,))\nax2 = display.axes[1].twinx()\nax2.plot(ds_met.time, ds_met.tbrg_precip_total, color='orange')\n\n# Plot up a day/night background\ndisplay.day_night_background(dsname='MET', subplot_index=(1,))\n\n","type":"content","url":"/foundations/act/act-basics-bnf#multi-panel-plot","position":47},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Adding some customization","lvl3":"Visualizing Data","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl4","url":"/foundations/act/act-basics-bnf#adding-some-customization","position":48},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Adding some customization","lvl3":"Visualizing Data","lvl2":"Bankhead National Forest (BNF)"},"content":"Let’s make this plot a little nicer and easier to read.  We can use a mix of ACT and Matplotlib to help\n\n#And plot again!\n# Create a plotting display object with 2 plots\n# Note we have to create a dictionary of datasets to pass in\ndisplay = act.plotting.TimeSeriesDisplay({'SMPS': ds_smps, 'MET': ds_met}, figsize=(15, 10), subplot_shape=(2,))\n\n# Let's add in titles and more to the SMPS plot\ntitle = 'Scanning Mobility Particle Sizer (SMPS) Number Size Distribution'\ncbar_title = 'dN/dlogD$_p$ (1/cm$^{3}$)'\ndisplay.plot('dN_dlogDp', dsname='SMPS', subplot_index=(0,), cvd_friendly=True,\n             norm=colors.LogNorm(vmin=100., vmax=10000.), set_title=title, cbar_label=cbar_title,\n             ylabel='Pariticle Diameter (nm)')\ndisplay.axes[0].set_yscale('log')\ndisplay.set_yrng([10, 1000], subplot_index=(0,))\n\n# Let's accumulate the precipitation using ACT to make this easier to read\nds_met = act.utils.data_utils.accumulate_precip(ds_met, 'tbrg_precip_total')\n\n# Plot up the MET btemperature and precipitation\ntitle = 'MET Temperature and Cumulative Precipitation'\ndisplay.plot('temp_mean', dsname='MET', subplot_index=(1,), set_title=title, color='black')\nax2 = display.axes[1].twinx()\nax2.plot(ds_met.time, ds_met.tbrg_precip_total_accumulated, color='blue')\nax2.set_ylabel('Precipitation (mm)')\n\n# Plot up a day/night background\ndisplay.day_night_background(dsname='MET', subplot_index=(1,))\n\n","type":"content","url":"/foundations/act/act-basics-bnf#adding-some-customization","position":49},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Distribution Display","lvl3":"Visualizing Data","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl4","url":"/foundations/act/act-basics-bnf#distribution-display","position":50},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Distribution Display","lvl3":"Visualizing Data","lvl2":"Bankhead National Forest (BNF)"},"content":"For the example, we will go over some functions within ACT’s distribution display. Functions such as, the stacked bar plot, scatter and groupby.\n\n# First, let's plot up a histogram of the data\n# All the ACT plotting is very similar to what we\n# did earlier, first we create a display object\ndisplay = act.plotting.DistributionDisplay(ds_met)\n\n# And then we can plot the data!  Note that we are passing a range into the\n# histogram function to set the min/max range of the data\ndisplay.plot_stacked_bar('temp_mean', hist_kwargs={'range': [4, 20]})\nplt.show()\n\n# First we need to combine data and to do that, we need to get it on the same time grid\nds_combined = xr.merge([ds_met.resample(time='1min').nearest(), ds_smps.resample(time='1min').nearest()], compat='override')\n\n\n# Next up, let's do some scatter plots to compare some variables\n# Scatter plots are also found in the DistributionDisplay module\ndisplay = act.plotting.DistributionDisplay(ds_combined)\n\n# And then we can plot the data!\ndisplay.plot_scatter('rh_mean', 'total_N_conc', m_field='time')\n\nplt.show()\n\n# Sometimes these scatter plots hide the number of points there actually\n# are in some areas so let's try a heatmap as well\ndisplay = act.plotting.DistributionDisplay(ds_combined, figsize=(12, 5), subplot_shape=(1, 2))\n\n# And then we can plot the data!\ndisplay.plot_scatter('rh_mean', 'total_N_conc', m_field='time', subplot_index=(0, 0))\n# This can be used to adjust the axes limits\n# display.set_xrng([0, 20], subplot_index=(0, 0))\n\n# we can also pass in an array of values for the bins using np.arange(start, stop, step)\ndisplay.plot_heatmap('rh_mean', 'total_N_conc', subplot_index=(0, 1), x_bins=25, y_bins=25)\nplt.show()\n\n","type":"content","url":"/foundations/act/act-basics-bnf#distribution-display","position":51},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Data Rose Plots","lvl3":"Visualizing Data","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl4","url":"/foundations/act/act-basics-bnf#data-rose-plots","position":52},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Data Rose Plots","lvl3":"Visualizing Data","lvl2":"Bankhead National Forest (BNF)"},"content":"If your data may be wind speed or direction dependent, these plots can help inform where the influences may be coming from.  For this example, let’s see if the total number concentration from the SMPS is dependent on wind direction.\n\n# Plot out the data rose using the WindRose display object\ndisplay = act.plotting.WindRoseDisplay(ds_combined)\ndisplay.plot_data('wdir_vec_mean', 'wspd_vec_mean', 'total_N_conc', num_dirs=15, plot_type='line', line_plot_calc='mean')\nplt.show()\n\n# Plot out the data rose using the WindRose display object\ndisplay = act.plotting.WindRoseDisplay(ds_combined)\n\n# Let's try a different type of data rose type that is using contours amd the polar y axis is wind speed\n# depending on wind direction and speed\ndisplay.plot_data('wdir_vec_mean', 'wspd_vec_mean', 'total_N_conc', num_dirs=15, plot_type='contour', contour_type='mean')\nplt.show()\n\n\n\n","type":"content","url":"/foundations/act/act-basics-bnf#data-rose-plots","position":53},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Data Used in this Notebook","lvl3":"Visualizing Data","lvl2":"Bankhead National Forest (BNF)"},"type":"lvl4","url":"/foundations/act/act-basics-bnf#data-used-in-this-notebook","position":54},{"hierarchy":{"lvl1":"ACT Basics with BNF","lvl4":"Data Used in this Notebook","lvl3":"Visualizing Data","lvl2":"Bankhead National Forest (BNF)"},"content":"Kuang, C., Singh, A., Howie, J., Salwen, C., & Hayes, C. Scanning mobility particle sizer (AOSSMPS), 2024-12-16 to 2024-12-19, Bankhead National Forest, AL, USA; Long-term Mobile Facility (BNF), Bankhead National Forest, AL, AMF3 (Main Site) (M1). Atmospheric Radiation Measurement (ARM) User Facility. \n\nKuang et al. (2021)\n\nKyrouac, J., Shi, Y., & Tuftedal, M. Surface Meteorological Instrumentation (MET), 2024-12-16 to 2024-12-19, Bankhead National Forest, AL, USA; Long-term Mobile Facility (BNF), Bankhead National Forest, AL, AMF3 (Main Site) (M1). Atmospheric Radiation Measurement (ARM) User Facility. \n\nKyrouac et al. (2021)","type":"content","url":"/foundations/act/act-basics-bnf#data-used-in-this-notebook","position":55},{"hierarchy":{"lvl1":"Work with BNF Tower Data"},"type":"lvl1","url":"/foundations/act/act-tower-data","position":0},{"hierarchy":{"lvl1":"Work with BNF Tower Data"},"content":"","type":"content","url":"/foundations/act/act-tower-data","position":1},{"hierarchy":{"lvl1":"Work with BNF Tower Data","lvl2":"Imports"},"type":"lvl2","url":"/foundations/act/act-tower-data#imports","position":2},{"hierarchy":{"lvl1":"Work with BNF Tower Data","lvl2":"Imports"},"content":"\n\nimport act\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nmpl.rcParams['font.size'] = 14\nmpl.rcParams['xtick.major.size'] = 14\n\n","type":"content","url":"/foundations/act/act-tower-data#imports","position":3},{"hierarchy":{"lvl1":"Work with BNF Tower Data","lvl2":"Search and Find BNF Tower Data"},"type":"lvl2","url":"/foundations/act/act-tower-data#search-and-find-bnf-tower-data","position":4},{"hierarchy":{"lvl1":"Work with BNF Tower Data","lvl2":"Search and Find BNF Tower Data"},"content":"\n\nusername=\"username\"\ntoken=\"token\"\n\nresults = act.discovery.download_arm_data(\n        username, token, 'bnftowerdtsch1S10.b1', '2025-04-04', '2025-04-05'\n)\n\n","type":"content","url":"/foundations/act/act-tower-data#search-and-find-bnf-tower-data","position":5},{"hierarchy":{"lvl1":"Work with BNF Tower Data","lvl2":"Load and Visualize Data Using ACT"},"type":"lvl2","url":"/foundations/act/act-tower-data#load-and-visualize-data-using-act","position":6},{"hierarchy":{"lvl1":"Work with BNF Tower Data","lvl2":"Load and Visualize Data Using ACT"},"content":"\n\nds = act.io.read_arm_netcdf(results)\n\nfig = plt.figure(figsize=(12,8))\nds.temperature.plot(x='time');","type":"content","url":"/foundations/act/act-tower-data#load-and-visualize-data-using-act","position":7},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar"},"type":"lvl1","url":"/foundations/pyart/pyart-basics","position":0},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar"},"content":"\n\n","type":"content","url":"/foundations/pyart/pyart-basics","position":1},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar"},"type":"lvl1","url":"/foundations/pyart/pyart-basics#py-art-basics-with-xradar","position":2},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar"},"content":"\n\n","type":"content","url":"/foundations/pyart/pyart-basics#py-art-basics-with-xradar","position":3},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Overview"},"type":"lvl2","url":"/foundations/pyart/pyart-basics#overview","position":4},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Overview"},"content":"Within this notebook, we will cover:\n\nGeneral overview of Py-ART and its functionality\n\nReading data using Py-ART\n\nAn overview of the pyart.Radar object\n\nCreate a Plot of our Radar Data\n\n","type":"content","url":"/foundations/pyart/pyart-basics#overview","position":5},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Prerequisites"},"type":"lvl2","url":"/foundations/pyart/pyart-basics#prerequisites","position":6},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nIntro to Cartopy\n\nHelpful\n\nBasic features\n\nWeather Radar Basics\n\nHelpful\n\nBackground Information\n\nMatplotlib Basics\n\nHelpful\n\nBasic plotting\n\nNumPy Basics\n\nHelpful\n\nBasic arrays\n\nXarray Basics\n\nHelpful\n\nMulti-dimensional arrays\n\nTime to learn: 45 minutes\n\n","type":"content","url":"/foundations/pyart/pyart-basics#prerequisites","position":7},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Imports"},"type":"lvl2","url":"/foundations/pyart/pyart-basics#imports","position":8},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Imports"},"content":"\n\nimport os\nimport warnings\n\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\n\n\nimport pyart\nfrom pyart.testing import get_test_data\nimport xradar as xd\n\nwarnings.filterwarnings(\"ignore\")\n\n","type":"content","url":"/foundations/pyart/pyart-basics#imports","position":9},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"An Overview of Py-ART"},"type":"lvl2","url":"/foundations/pyart/pyart-basics#an-overview-of-py-art","position":10},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"An Overview of Py-ART"},"content":"\n\n","type":"content","url":"/foundations/pyart/pyart-basics#an-overview-of-py-art","position":11},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"History of the Py-ART","lvl2":"An Overview of Py-ART"},"type":"lvl3","url":"/foundations/pyart/pyart-basics#history-of-the-py-art","position":12},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"History of the Py-ART","lvl2":"An Overview of Py-ART"},"content":"Development began to address the needs of ARM with the acquisition of a number of\nnew scanning cloud and precipitation radar as part of the American Recovery Act.\n\nThe project has since expanded to work with a variety of weather radars and a wider user\nbase including radar researchers and climate modelers.\n\nThe software has been released on GitHub as open source software under a BSD license.\nRuns on Linux, OS X. It also runs on Windows with more limited functionality.","type":"content","url":"/foundations/pyart/pyart-basics#history-of-the-py-art","position":13},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"What can Py-ART Do?","lvl2":"An Overview of Py-ART"},"type":"lvl3","url":"/foundations/pyart/pyart-basics#what-can-py-art-do","position":14},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"What can Py-ART Do?","lvl2":"An Overview of Py-ART"},"content":"Py-ART can be used for a variety of tasks from basic plotting to more complex\nprocessing pipelines. Specific uses for Py-ART include:\n\npyart.io Module for reading radar data in a variety of file formats.\n\npyart.graph Module for creating plots and visualization of radar data.\n\npyart.correct Module for correcting radar moments while in antenna coordinates, such as:\n\nDoppler unfolding/de-aliasing.\n\nAttenuation correction.\n\nPhase processing using a Linear Programming method.\n\npyart.map Mapping data from one or multiple radars onto a Cartesian grid.\n\npyart.retrieve Performing retrievals.\n\npyart​.io​.write​_cfradial Writing radial and Cartesian data to NetCDF files.","type":"content","url":"/foundations/pyart/pyart-basics#what-can-py-art-do","position":15},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"Py-ART 2.0","lvl2":"An Overview of Py-ART"},"type":"lvl3","url":"/foundations/pyart/pyart-basics#py-art-2-0","position":16},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"Py-ART 2.0","lvl2":"An Overview of Py-ART"},"content":"Py-ART 2.0 offers the option to use \n\nxradar for reading weather radar data into the xarray data model. Py-ART 2.0 also supports \n\ncmweather, a new package dedicated to supporting color vision deficiency (CVD) friendly colormaps. Please check the \n\nlinked documentation to view all the changes within Py-ART 2.0.\n\n","type":"content","url":"/foundations/pyart/pyart-basics#py-art-2-0","position":17},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Reading in Data Using Py-ART and xradar"},"type":"lvl2","url":"/foundations/pyart/pyart-basics#reading-in-data-using-py-art-and-xradar","position":18},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Reading in Data Using Py-ART and xradar"},"content":"\n\n","type":"content","url":"/foundations/pyart/pyart-basics#reading-in-data-using-py-art-and-xradar","position":19},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"Reading data in using xradar.io.open_","lvl2":"Reading in Data Using Py-ART and xradar"},"type":"lvl3","url":"/foundations/pyart/pyart-basics#reading-data-in-using-xradar-io-open","position":20},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"Reading data in using xradar.io.open_","lvl2":"Reading in Data Using Py-ART and xradar"},"content":"\n\nWhen reading in a radar file, we use the xradar.io module.\n\nxradar.io can read a variety of different radar formats, such as Cf/Radial, ODIM_H5, etc.\nThe documentation on what formats can be read by xradar can be found here:\n\nxradar readers Documentation\n\nLet’s take a look at one of these readers:\n\n?xd.io.open_cfradial1_datatree\n\nLet’s use a sample data file from pyart - which is \n\ncfradial format.\n\nWhen we read this in, we get a \n\nxarray.DataTree object that bundles the different radar sweeps into one structure!\n\nfile = \"/data/project/ARM_Summer_School_2025/radar/csapr2/ppi/bnfcsapr2cfrS3.a1.20250315.190050.nc\"\ndt = xd.io.open_cfradial1_datatree(file)\ndt\n\n","type":"content","url":"/foundations/pyart/pyart-basics#reading-data-in-using-xradar-io-open","position":21},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"Investigate the xradar object","lvl2":"Reading in Data Using Py-ART and xradar"},"type":"lvl3","url":"/foundations/pyart/pyart-basics#investigate-the-xradar-object","position":22},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"Investigate the xradar object","lvl2":"Reading in Data Using Py-ART and xradar"},"content":"\n\nWithin this \n\nxradar object object are the actual data fields, each stored in a different group, mimicking the FM301/cfradial2 data standard.\n\nThis is where data such as reflectivity and velocity are stored.\n\nTo see what fields are present we can add the fields and keys additions to the variable where the radar object is stored.\n\ndt[\"sweep_0\"]\n\n","type":"content","url":"/foundations/pyart/pyart-basics#investigate-the-xradar-object","position":23},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl4":"Extract a sample data field","lvl3":"Investigate the xradar object","lvl2":"Reading in Data Using Py-ART and xradar"},"type":"lvl4","url":"/foundations/pyart/pyart-basics#extract-a-sample-data-field","position":24},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl4":"Extract a sample data field","lvl3":"Investigate the xradar object","lvl2":"Reading in Data Using Py-ART and xradar"},"content":"\n\nThe fields are stored in a dictionary, each containing coordinates, units and more.\nAll can be accessed by just adding the fields addition to the radar object variable.\n\nFor an individual field, we add a string in brackets after the fields addition to see\nthe contents of that field.\n\nLet’s take a look at 'corrected_reflectivity_horizontal', which is a common field to investigate.\n\nprint(dt[\"sweep_0\"][\"uncorrected_reflectivity_h\"])\n\nWe can go even further in the dictionary and access the actual reflectivity data.\n\nWe use add .data at the end, which will extract the data array (which is a numpy array) from the dictionary.\n\nreflectivity = dt[\"sweep_0\"][\"uncorrected_reflectivity_h\"].data\nprint(type(reflectivity), reflectivity)\n\nLets’ check the size of this array...\n\nreflectivity.shape\n\nThis reflectivity data array, numpy array, is a two-dimensional array with dimensions:\n\nRange (distance away from the radar)\n\nAzimuth (direction around the radar)\n\ndt[\"sweep_0\"].dims\n\nIf we wanted to look the 300th ray, at the second gate, we would use something like the following:\n\nprint(reflectivity[300, 2])\n\nWe can also select a specific azimuth if desired, using the xarray syntax:\n\ndt[\"sweep_0\"].sel(azimuth=180, method=\"nearest\")\n\n\n\n","type":"content","url":"/foundations/pyart/pyart-basics#extract-a-sample-data-field","position":25},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Plotting our Radar Data"},"type":"lvl2","url":"/foundations/pyart/pyart-basics#plotting-our-radar-data","position":26},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Plotting our Radar Data"},"content":"\n\n","type":"content","url":"/foundations/pyart/pyart-basics#plotting-our-radar-data","position":27},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"An Overview of Py-ART Plotting Utilities","lvl2":"Plotting our Radar Data"},"type":"lvl3","url":"/foundations/pyart/pyart-basics#an-overview-of-py-art-plotting-utilities","position":28},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"An Overview of Py-ART Plotting Utilities","lvl2":"Plotting our Radar Data"},"content":"Now that we have loaded the data and inspected it, the next logical thing to do is to visualize the data! Py-ART’s visualization functionality is done through the objects in the \n\npyart.graph module.\n\nIn Py-ART there are 4 primary visualization classes in pyart.graph:\n\nRadarDisplay\n\nRadarMapDisplay\n\nAirborneRadarDisplay\n\nPlotting grid data\n\nGridMapDisplay","type":"content","url":"/foundations/pyart/pyart-basics#an-overview-of-py-art-plotting-utilities","position":29},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"Use the RadarMapDisplay with our data","lvl2":"Plotting our Radar Data"},"type":"lvl3","url":"/foundations/pyart/pyart-basics#use-the-radarmapdisplay-with-our-data","position":30},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"Use the RadarMapDisplay with our data","lvl2":"Plotting our Radar Data"},"content":"For the this example, we will be using RadarMapDisplay, using Cartopy to deal with geographic coordinates.\n\nWe start by creating a figure first, and adding our traditional radar methods to the xradar object.\n\nfig = plt.figure(figsize=[10, 10])\nradar = pyart.xradar.Xradar(dt)\n\nOnce we have a figure, let’s add our RadarMapDisplay\n\nfig = plt.figure(figsize=[10, 10])\ndisplay = pyart.graph.RadarMapDisplay(radar)\n\nAdding our map display without specifying a field to plot won’t do anything we need to specifically add a field to field using .plot_ppi_map()\n\ndisplay.plot_ppi_map(\"uncorrected_reflectivity_h\")\n\nBy default, it will plot the elevation scan, the the default colormap from Matplotlib... let’s customize!\n\nWe add the following arguements:\n\nsweep=3 - The fourth elevation scan (since we are using Python indexing)\n\nvmin=-20 - Minimum value for our plotted field/colorbar\n\nvmax=60 - Maximum value for our plotted field/colorbar\n\nprojection=ccrs.PlateCarree() - Cartopy latitude/longitude coordinate system\n\ncmap='pyart_HomeyerRainbow' - Colormap to use, selecting one provided by PyART\n\nfig = plt.figure(figsize=[12, 12])\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map(\n    \"uncorrected_reflectivity_h\",\n    sweep=3,\n    vmin=-20,\n    vmax=60,\n    projection=ccrs.PlateCarree(),\n    cmap=\"HomeyerRainbow\",\n)\nplt.show()\n\nYou can change many parameters in the graph by changing the arguments to plot_ppi_map. As you can recall from earlier. simply view these arguments in a Jupyter notebook by typing:\n\n?display.plot_ppi_map\n\nOr, let’s view a different elevation scan! To do this, change the sweep parameter in the plot_ppi_map function.\n\nfig = plt.figure(figsize=[12, 12])\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map(\n    \"uncorrected_reflectivity_h\",\n    sweep=0,\n    vmin=-20,\n    vmax=60,\n    projection=ccrs.PlateCarree(),\n    cmap=\"Carbone42\",\n)\nplt.show()\n\n\n\n","type":"content","url":"/foundations/pyart/pyart-basics#use-the-radarmapdisplay-with-our-data","position":31},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Gridding with Py-ART"},"type":"lvl2","url":"/foundations/pyart/pyart-basics#gridding-with-py-art","position":32},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Gridding with Py-ART"},"content":"Gridding is an important workflow to understand when working with radar data! Here, we walk through the steps required.\n\n","type":"content","url":"/foundations/pyart/pyart-basics#gridding-with-py-art","position":33},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"Antenna vs. Cartesian Coordinates","lvl2":"Gridding with Py-ART"},"type":"lvl3","url":"/foundations/pyart/pyart-basics#antenna-vs-cartesian-coordinates","position":34},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"Antenna vs. Cartesian Coordinates","lvl2":"Gridding with Py-ART"},"content":"Radar data, by default, is stored in a polar (or antenna) coordinate system, with the data coordinates stored as an angle (ranging from 0 to 360 degrees with 0 == North), and a radius from the radar, and an elevation which is the angle between the ground and the ground.\n\nThis format can be challenging to plot, since it is scan/radar specific. Also, it can make comparing with model data, which is on a lat/lon grid, challenging since one would need to transform the model daa cartesian coordinates to polar/antenna coordiantes.\n\nFortunately, PyART has a variety of gridding routines, which can be used to grid your data to a Cartesian grid. Once it is in this new grid, one can easily slice/dice the dataset, and compare to other data sources.","type":"content","url":"/foundations/pyart/pyart-basics#antenna-vs-cartesian-coordinates","position":35},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"Why is Gridding Important?","lvl2":"Gridding with Py-ART"},"type":"lvl3","url":"/foundations/pyart/pyart-basics#why-is-gridding-important","position":36},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"Why is Gridding Important?","lvl2":"Gridding with Py-ART"},"content":"Gridding is essential to combining multiple data sources (ex. multiple radars), and comparing to other data sources (ex. model data). There are also decisions that are made during the gridding process that have a large impact on the regridded data - for example:\n\nWhat resolution should my grid be?\n\nWhich interpolation routine should I use?\n\nHow smooth should my interpolated data be?\n\nWhile there is not always a right or wrong answer, it is important to understand the options available, and document which routine you used with your data! Also - experiment with different options and choose the best for your use case!","type":"content","url":"/foundations/pyart/pyart-basics#why-is-gridding-important","position":37},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"The Grid Object","lvl2":"Gridding with Py-ART"},"type":"lvl3","url":"/foundations/pyart/pyart-basics#the-grid-object","position":38},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"The Grid Object","lvl2":"Gridding with Py-ART"},"content":"We can transform our data into this grid object, from the radars, using pyart.map.grid_from_radars().\n\nBeforing gridding our data, we need to make a decision about the desired grid resolution and extent. For example, one might imagine a grid configuration of:\n\nGrid extent/limits\n\n20 km in the x-direction (north/south)\n\n20 km in the y-direction (west/east)\n\n15 km in the z-direction (vertical)\n\n500 m spatial resolution\n\nThe pyart.map.grid_from_radars() function takes the grid shape and grid limits as input, with the order (z, y, x).\n\nLet’s setup our configuration, setting our grid extent first, with the distance measured in meters\n\nz_grid_limits = (500.,15_000.)\ny_grid_limits = (-30_000.,30_000.)\nx_grid_limits = (-30_000.,30_000.)\n\nNow that we have our grid limits, we can set our desired resolution (again, in meters)\n\ngrid_resolution = 500\n\nLet’s compute our grid shape - using the extent and resolution to compute the number of grid points in each direction.\n\ndef compute_number_of_points(extent, resolution):\n    return int((extent[1] - extent[0])/resolution)\n\nNow that we have a helper function to compute this, let’s apply it to our vertical dimension\n\nz_grid_points = compute_number_of_points(z_grid_limits, grid_resolution)\nz_grid_points\n\nWe can apply this to the horizontal (x, y) dimensions as well.\n\nx_grid_points = compute_number_of_points(x_grid_limits, grid_resolution)\ny_grid_points = compute_number_of_points(y_grid_limits, grid_resolution)\n\nprint(z_grid_points,\n      y_grid_points,\n      x_grid_points)\n\n","type":"content","url":"/foundations/pyart/pyart-basics#the-grid-object","position":39},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl4":"Use our configuration to grid the data!","lvl3":"The Grid Object","lvl2":"Gridding with Py-ART"},"type":"lvl4","url":"/foundations/pyart/pyart-basics#use-our-configuration-to-grid-the-data","position":40},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl4":"Use our configuration to grid the data!","lvl3":"The Grid Object","lvl2":"Gridding with Py-ART"},"content":"Now that we have the grid shape and grid limits, let’s grid up our radar!\n\ngrid = pyart.map.grid_from_radars([radar],\n                                  grid_shape=(z_grid_points,\n                                              y_grid_points,\n                                              x_grid_points),\n                                  grid_limits=(z_grid_limits,\n                                               y_grid_limits,\n                                               x_grid_limits),\n                                 )\ngrid\n\n","type":"content","url":"/foundations/pyart/pyart-basics#use-our-configuration-to-grid-the-data","position":41},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"Plot the Grid Object","lvl2":"Gridding with Py-ART"},"type":"lvl3","url":"/foundations/pyart/pyart-basics#plot-the-grid-object","position":42},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"Plot the Grid Object","lvl2":"Gridding with Py-ART"},"content":"","type":"content","url":"/foundations/pyart/pyart-basics#plot-the-grid-object","position":43},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl4":"Plot a horizontal view of the data","lvl3":"Plot the Grid Object","lvl2":"Gridding with Py-ART"},"type":"lvl4","url":"/foundations/pyart/pyart-basics#plot-a-horizontal-view-of-the-data","position":44},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl4":"Plot a horizontal view of the data","lvl3":"Plot the Grid Object","lvl2":"Gridding with Py-ART"},"content":"We can use the GridMapDisplay from pyart.graph to visualize our regridded data, starting with a horizontal view (slice along a single vertical level)\n\ndisplay = pyart.graph.GridMapDisplay(grid)\ndisplay.plot_grid('uncorrected_reflectivity_h',\n                  level=0,\n                  vmin=-20,\n                  vmax=60,\n                  cmap='HomeyerRainbow')\n\n","type":"content","url":"/foundations/pyart/pyart-basics#plot-a-horizontal-view-of-the-data","position":45},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl4":"Plot a Latitudinal Slice","lvl3":"Plot the Grid Object","lvl2":"Gridding with Py-ART"},"type":"lvl4","url":"/foundations/pyart/pyart-basics#plot-a-latitudinal-slice","position":46},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl4":"Plot a Latitudinal Slice","lvl3":"Plot the Grid Object","lvl2":"Gridding with Py-ART"},"content":"\n\nWe can also slice through a single latitude or longitude!\n\ndisplay.plot_latitude_slice('uncorrected_reflectivity_h',\n                            lat=36.5,\n                            vmin=-20,\n                            vmax=60,\n                            cmap='HomeyerRainbow')\nplt.xlim([-20, 20]);\n\n","type":"content","url":"/foundations/pyart/pyart-basics#plot-a-latitudinal-slice","position":47},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl4":"Plot with Xarray","lvl3":"Plot the Grid Object","lvl2":"Gridding with Py-ART"},"type":"lvl4","url":"/foundations/pyart/pyart-basics#plot-with-xarray","position":48},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl4":"Plot with Xarray","lvl3":"Plot the Grid Object","lvl2":"Gridding with Py-ART"},"content":"\n\nAnother neat feature of the Grid object is that we can transform it to an xarray.Dataset!\n\nds = grid.to_xarray()\nds\n\nNow, our plotting routine is a one-liner, starting with the horizontal slice:\n\nds.isel(z=0).uncorrected_reflectivity_h.plot(cmap='HomeyerRainbow',\n                                             vmin=-20,\n                                             vmax=60);\n\nAnd a vertical slice at a given y dimension (latitude)\n\nds.sel(y=1300,\n       method='nearest').uncorrected_reflectivity_h.plot(cmap='HomeyerRainbow',\n                                                         vmin=-20,\n                                                         vmax=60);\n\n","type":"content","url":"/foundations/pyart/pyart-basics#plot-with-xarray","position":49},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Challenge"},"type":"lvl2","url":"/foundations/pyart/pyart-basics#challenge","position":50},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Challenge"},"content":"Find data from last night’s event and plot it up! Feel free to grid, etc.\n\nHint: the site code is bnf with the instrument being csapr2\n\nhttps://adc.arm.gov\n\n","type":"content","url":"/foundations/pyart/pyart-basics#challenge","position":51},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Summary"},"type":"lvl2","url":"/foundations/pyart/pyart-basics#summary","position":52},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Summary"},"content":"Within this notebook, we covered the basics of working with radar data using pyart, including:\n\nReading in a file using xradar.io\n\nInvestigating the xradar object\n\nVisualizing radar data using the RadarMapDisplay\n\nGridding with Py-ART\n\nVisualizing gridded output","type":"content","url":"/foundations/pyart/pyart-basics#summary","position":53},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"What’s Next","lvl2":"Summary"},"type":"lvl3","url":"/foundations/pyart/pyart-basics#whats-next","position":54},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl3":"What’s Next","lvl2":"Summary"},"content":"In the next few notebooks, we walk through applying data cleaning methods, and advanced visualization methods!\n\n","type":"content","url":"/foundations/pyart/pyart-basics#whats-next","position":55},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Resources and References"},"type":"lvl2","url":"/foundations/pyart/pyart-basics#resources-and-references","position":56},{"hierarchy":{"lvl1":"Py-ART Basics with Xradar","lvl2":"Resources and References"},"content":"Py-ART essentials links:\n\nLanding page\n\nExamples\n\nSource Code\n\nMailing list\n\nIssue Tracker","type":"content","url":"/foundations/pyart/pyart-basics#resources-and-references","position":57},{"hierarchy":{"lvl1":"Py-ART Corrections"},"type":"lvl1","url":"/foundations/pyart/pyart-corrections","position":0},{"hierarchy":{"lvl1":"Py-ART Corrections"},"content":"\n\n","type":"content","url":"/foundations/pyart/pyart-corrections","position":1},{"hierarchy":{"lvl1":"Py-ART Corrections"},"type":"lvl1","url":"/foundations/pyart/pyart-corrections#py-art-corrections","position":2},{"hierarchy":{"lvl1":"Py-ART Corrections"},"content":"\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#py-art-corrections","position":3},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Overview"},"type":"lvl2","url":"/foundations/pyart/pyart-corrections#overview","position":4},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Overview"},"content":"Within this notebook, we will cover:\n\nIntro to radar aliasing.\n\nCalculation of velocity texture using Py-ART\n\nDealiasing the velocity field","type":"content","url":"/foundations/pyart/pyart-corrections#overview","position":5},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Prerequisites"},"type":"lvl2","url":"/foundations/pyart/pyart-corrections#prerequisites","position":6},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nPy-ART Basics\n\nHelpful\n\nBasic features\n\nWeather Radar Basics\n\nHelpful\n\nBackground Information\n\nMatplotlib Basics\n\nHelpful\n\nBasic plotting\n\nNumPy Basics\n\nHelpful\n\nBasic arrays\n\nXarray Basics\n\nHelpful\n\nMulti-dimensional arrays\n\nTime to learn: 15 minutes\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#prerequisites","position":7},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Imports"},"type":"lvl2","url":"/foundations/pyart/pyart-corrections#imports","position":8},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Imports"},"content":"\n\nimport os\nimport warnings\n\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport xarray as xr\n\nimport pyart\nfrom pyart.testing import get_test_data\nimport xradar as xd\n\nwarnings.filterwarnings('ignore')\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#imports","position":9},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Read in the Data"},"type":"lvl2","url":"/foundations/pyart/pyart-corrections#read-in-the-data","position":10},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Read in the Data"},"content":"\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#read-in-the-data","position":11},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Read in a sample file from the University of Alabama Huntsville (UAH) ARMOR Site","lvl2":"Read in the Data"},"type":"lvl3","url":"/foundations/pyart/pyart-corrections#read-in-a-sample-file-from-the-university-of-alabama-huntsville-uah-armor-site","position":12},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Read in a sample file from the University of Alabama Huntsville (UAH) ARMOR Site","lvl2":"Read in the Data"},"content":"Our data is formatted as an sigmet file, which is a vendor-specific format, produced by Vaisala radars.\n\nInspect the xradar.io documentation for the iris/sigment reader for this specific format\n\nfile = \"../../data/uah-armor/RAW_NA_000_125_20080411182229\"\n\nradar = pyart.io.read(file)\n\nradar.fields\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#read-in-a-sample-file-from-the-university-of-alabama-huntsville-uah-armor-site","position":13},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Plot a quick-look of reflectivity and velocity","lvl2":"Read in the Data"},"type":"lvl3","url":"/foundations/pyart/pyart-corrections#plot-a-quick-look-of-reflectivity-and-velocity","position":14},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Plot a quick-look of reflectivity and velocity","lvl2":"Read in the Data"},"content":"We can start by taking a quick look at the reflectivity and velocity fields. Notice how the velocity field is rather messy, indicated by the speckles and high/low values directly next to each other\n\nfig = plt.figure(figsize=[8, 10])\nax = plt.subplot(211, projection=ccrs.PlateCarree())\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('reflectivity',\n                     ax=ax,\n                     sweep=0,\n                     resolution='50m',\n                     vmin=0,\n                     vmax=60, \n                     projection=ccrs.PlateCarree(),\n                     cmap='HomeyerRainbow')\n\nax2 = plt.subplot(2,1,2,projection=ccrs.PlateCarree())\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('velocity',\n                     ax=ax2,\n                     sweep=0,\n                     resolution='50m',\n                     vmin=-17,\n                     vmax=17, \n                     projection=ccrs.PlateCarree(),\n                     cmap='balance')\nplt.show()\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#plot-a-quick-look-of-reflectivity-and-velocity","position":15},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Dealiasing our Velocity"},"type":"lvl2","url":"/foundations/pyart/pyart-corrections#dealiasing-our-velocity","position":16},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Dealiasing our Velocity"},"content":"","type":"content","url":"/foundations/pyart/pyart-corrections#dealiasing-our-velocity","position":17},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"An Overview of Aliasing","lvl2":"Dealiasing our Velocity"},"type":"lvl3","url":"/foundations/pyart/pyart-corrections#an-overview-of-aliasing","position":18},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"An Overview of Aliasing","lvl2":"Dealiasing our Velocity"},"content":"\n\nThe radial velocity measured by the radar is mesasured by detecting the phase shift between the transmitted pulse and the pulse recieved by the radar. However, using this methodology, it is only possible to detect phase shifts within \\pm 2\\pi due to the periodicity of the transmitted wave. Therefore, for example, a phase shift of 3\\pi would erroneously be detected as a phase shift of -\\pi and give an incorrect value of velocity when retrieved by the radar. This phenomena is called aliasing. The maximium unambious velocity that can be detected by the radar before aliasing occurs is called the Nyquist velocity.\n\nIn the next example, you will see an example of aliasing occurring, where the values of +15 m/s abruptly transition into a region of -15 m/s, with -5 m/s in the middle of the region around 37 N, 97 W.\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#an-overview-of-aliasing","position":19},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Calculate Velocity Texture","lvl2":"Dealiasing our Velocity"},"type":"lvl3","url":"/foundations/pyart/pyart-corrections#calculate-velocity-texture","position":20},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Calculate Velocity Texture","lvl2":"Dealiasing our Velocity"},"content":"First, for dealiasing to work efficiently, we need to use a GateFilter. Notice that, this time, the data shown does not give us a nice gate_id. This is what raw data looks like, and we need to do some preprocessing on the data to remove noise and clutter. Thankfully, Py-ART gives us the capability to do this. As a simple filter in this example, we will first calculate the velocity texture using Py-ART’s \n\ncalculate_velocity_texture function. The velocity texture is the standard deviation of velocity surrounding a gate. This will be higher in the presence of noise.\n\nLet’s investigate this function first...\n\npyart.retrieve.calculate_velocity_texture?\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#calculate-velocity-texture","position":21},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Determining the Right Parameters","lvl2":"Dealiasing our Velocity"},"type":"lvl3","url":"/foundations/pyart/pyart-corrections#determining-the-right-parameters","position":22},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Determining the Right Parameters","lvl2":"Dealiasing our Velocity"},"content":"You’ll notice that we need:\n\nOur radar object\n\nThe name of our velocity field\n\nThe number of gates within our window to use to calculate the texture\n\nThe nyquist velocity\n\nWe can retrieve the nyquest velocity from our instrument parameters fortunately - using the following syntax!\n\nnyquist_velocity = radar.instrument_parameters[\"nyquist_velocity\"][\"data\"]\nnyquist_velocity\n\nWhile the nyquist velocity is stored as an array, we see that these are all the same value...\n\nnp.unique(nyquist_velocity)\n\nLet’s save this single value to a float to use later...\n\nnyquist_value = np.unique(nyquist_velocity)[0]\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#determining-the-right-parameters","position":23},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"type":"lvl3","url":"/foundations/pyart/pyart-corrections#calculate-velocity-texture-and-filter-our-data","position":24},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"content":"Now that we have an ide?a of which parameters to pass in, let’s calculate velocity texture!\n\nvel_texture = pyart.retrieve.calculate_velocity_texture(radar,\n                                                        vel_field='velocity',\n                                                        nyq=nyquist_value)\nvel_texture\n\nThe pyart.retrieve.calculate_velocity_texture function results in a data dictionary, including the actual data, as well as metadata. We can add this to our radar object, by using the radar.add_field method, passing the name of our new field (\"texture\"), the data dictionary (vel_texture), and a clarification that we want to replace the existing velocity texture field if it already exists in our radar object (replace_existing=True)\n\nradar.add_field('texture', vel_texture, replace_existing=True)\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#calculate-velocity-texture-and-filter-our-data","position":25},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Plot our Velocity Texture Field","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"type":"lvl4","url":"/foundations/pyart/pyart-corrections#plot-our-velocity-texture-field","position":26},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Plot our Velocity Texture Field","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"content":"\n\nNow that we have our velocity texture field added to our radar object, let’s plot it!\n\nfig = plt.figure(figsize=[8, 8])\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('texture',\n                     sweep=0,\n                     resolution='50m',\n                     vmin=0,\n                     vmax=10, \n                     projection=ccrs.PlateCarree(),\n                     cmap='balance')\nplt.show()\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#plot-our-velocity-texture-field","position":27},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Determine a Suitable Velocity Texture Threshold","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"type":"lvl4","url":"/foundations/pyart/pyart-corrections#determine-a-suitable-velocity-texture-threshold","position":28},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Determine a Suitable Velocity Texture Threshold","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"content":"\n\nPlot a histogram of velocity texture to get a better idea of what values correspond to hydrometeors and what values of texture correspond to artifacts.\n\nIn the below example, a threshold of 3 would eliminate most of the peak corresponding to noise around 6 while preserving most of the values in the peak of ~0.5 corresponding to hydrometeors.\n\nhist, bins = np.histogram(radar.fields['texture']['data'],\n                          bins=150)\nbins = (bins[1:]+bins[:-1])/2.0\n\nplt.plot(bins,\n         hist,\n         label='Velocity Texture Frequency')\nplt.axvline(3,\n            color='r',\n            label='Proposed Velocity Texture Threshold')\n\nplt.xlabel('Velocity texture')\nplt.ylabel('Count')\nplt.legend()\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#determine-a-suitable-velocity-texture-threshold","position":29},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Setup a Gatefilter Object and Apply our Threshold","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"type":"lvl4","url":"/foundations/pyart/pyart-corrections#setup-a-gatefilter-object-and-apply-our-threshold","position":30},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Setup a Gatefilter Object and Apply our Threshold","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"content":"\n\nNow we can set up our GateFilter (\n\npyart.filters.GateFilter), which allows us to easily apply masks and filters to our radar object.\n\ngatefilter = pyart.filters.GateFilter(radar)\ngatefilter\n\nWe discovered that a velocity texture threshold of only including values below 3 would be suitable for this dataset, we use the .exclude_above method, specifying we want to exclude texture values above 3.\n\ngatefilter.exclude_above('texture', 3)\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#setup-a-gatefilter-object-and-apply-our-threshold","position":31},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Plot our Filtered Data","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"type":"lvl4","url":"/foundations/pyart/pyart-corrections#plot-our-filtered-data","position":32},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Plot our Filtered Data","lvl3":"Calculate Velocity Texture and Filter our Data","lvl2":"Dealiasing our Velocity"},"content":"\n\nNow that we have created a gatefilter, filtering our data using the velocity texture, let’s plot our data!\n\nWe need to pass our gatefilter to the plot_ppi_map to apply it to our plot.\n\n# Plot our Unfiltered Data\nfig = plt.figure(figsize=[8, 10])\nax = plt.subplot(211, projection=ccrs.PlateCarree())\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('velocity',\n                     title='Raw Radial Velocity (no filter)',\n                     ax=ax,\n                     sweep=0,\n                     resolution='50m',\n                     vmin=-17,\n                     vmax=17,\n                     projection=ccrs.PlateCarree(),\n                     colorbar_label='Radial Velocity (m/s)',\n                     cmap='balance')\n\nax2 = plt.subplot(2,1,2,projection=ccrs.PlateCarree())\n\n# Plot our filtered data\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('velocity',\n                     title='Radial Velocity with Velocity Texture Filter',\n                     ax=ax2,\n                     sweep=0,\n                     resolution='50m',\n                     vmin=-17,\n                     vmax=17, \n                     projection=ccrs.PlateCarree(),\n                     colorbar_label='Radial Velocity (m/s)',\n                     gatefilter=gatefilter,\n                     cmap='balance')\nplt.show()\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#plot-our-filtered-data","position":33},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Dealias the Velocity Using the Region-Based Method","lvl2":"Dealiasing our Velocity"},"type":"lvl3","url":"/foundations/pyart/pyart-corrections#dealias-the-velocity-using-the-region-based-method","position":34},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"Dealias the Velocity Using the Region-Based Method","lvl2":"Dealiasing our Velocity"},"content":"\n\nAt this point, we can use the \n\ndealias_region_based to dealias the velocities and then add the new field to the radar!\n\nvelocity_dealiased = pyart.correct.dealias_region_based(radar,\n                                                        vel_field='velocity',\n                                                        nyquist_vel=nyquist_value,\n                                                        centered=True,\n                                                        gatefilter=gatefilter)\n\n# Add our data dictionary to the radar object\nradar.add_field('corrected_velocity', velocity_dealiased, replace_existing=True)\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#dealias-the-velocity-using-the-region-based-method","position":35},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Plot our Cleaned, Dealiased Velocities","lvl3":"Dealias the Velocity Using the Region-Based Method","lvl2":"Dealiasing our Velocity"},"type":"lvl4","url":"/foundations/pyart/pyart-corrections#plot-our-cleaned-dealiased-velocities","position":36},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl4":"Plot our Cleaned, Dealiased Velocities","lvl3":"Dealias the Velocity Using the Region-Based Method","lvl2":"Dealiasing our Velocity"},"content":"\n\nPlot the new velocities, which now look much more realistic.\n\nfig = plt.figure(figsize=[8, 8])\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('corrected_velocity',\n                     sweep=0,\n                     resolution='50m',\n                     vmin=-30,\n                     vmax=30, \n                     projection=ccrs.PlateCarree(),\n                     colorbar_label='Radial Velocity (m/s)',\n                     cmap='balance',\n                     gatefilter=gatefilter)\nplt.show()\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#plot-our-cleaned-dealiased-velocities","position":37},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Compare our Raw Velocity Field to our Dealiased, Cleaned Velocity Field"},"type":"lvl2","url":"/foundations/pyart/pyart-corrections#compare-our-raw-velocity-field-to-our-dealiased-cleaned-velocity-field","position":38},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Compare our Raw Velocity Field to our Dealiased, Cleaned Velocity Field"},"content":"As a last comparison, let’s compare our raw, uncorrected velocities with our cleaned velocities, after applying the velocity texture threshold and dealiasing algorithm\n\n# Plot our Unfiltered Data\nfig = plt.figure(figsize=[8, 10])\nax = plt.subplot(211, projection=ccrs.PlateCarree())\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('velocity',\n                     title='Raw Radial Velocity (no filter)',\n                     ax=ax,\n                     sweep=0,\n                     resolution='50m',\n                     vmin=-30,\n                     vmax=30,\n                     projection=ccrs.PlateCarree(),\n                     colorbar_label='Radial Velocity (m/s)',\n                     cmap='balance')\n\nax2 = plt.subplot(2,1,2,projection=ccrs.PlateCarree())\n\n# Plot our filtered, dealiased data\ndisplay = pyart.graph.RadarMapDisplay(radar)\ndisplay.plot_ppi_map('corrected_velocity',\n                     title='Radial Velocity with Velocity Texture Filter and Dealiasing',\n                     ax=ax2,\n                     sweep=0,\n                     resolution='50m',\n                     vmin=-30,\n                     vmax=30, \n                     projection=ccrs.PlateCarree(),\n                     gatefilter=gatefilter,\n                     colorbar_label='Radial Velocity (m/s)',\n                     cmap='balance')\nplt.show()\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#compare-our-raw-velocity-field-to-our-dealiased-cleaned-velocity-field","position":39},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Conclusions"},"type":"lvl2","url":"/foundations/pyart/pyart-corrections#conclusions","position":40},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Conclusions"},"content":"Within this lesson, we walked through how to apply radial velocity corrections to a dataset, filtering based on the velocity texture and using a regional dealiasing algorithm.","type":"content","url":"/foundations/pyart/pyart-corrections#conclusions","position":41},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"What’s Next","lvl2":"Conclusions"},"type":"lvl3","url":"/foundations/pyart/pyart-corrections#whats-next","position":42},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl3":"What’s Next","lvl2":"Conclusions"},"content":"In the next few notebooks, we walk through retrieval development and advanced visualization methods!\n\n","type":"content","url":"/foundations/pyart/pyart-corrections#whats-next","position":43},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Resources and References"},"type":"lvl2","url":"/foundations/pyart/pyart-corrections#resources-and-references","position":44},{"hierarchy":{"lvl1":"Py-ART Corrections","lvl2":"Resources and References"},"content":"Py-ART essentials links:\n\nLanding page\n\nExamples\n\nSource Code\n\nMailing list\n\nIssue Tracker","type":"content","url":"/foundations/pyart/pyart-corrections#resources-and-references","position":45},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART"},"type":"lvl1","url":"/foundations/pyart/pyart-qpe","position":0},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART"},"content":"\n\n","type":"content","url":"/foundations/pyart/pyart-qpe","position":1},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART"},"type":"lvl1","url":"/foundations/pyart/pyart-qpe#quantitative-precipitation-estimate-qpe-analysis-with-py-art","position":2},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART"},"content":"\n\n","type":"content","url":"/foundations/pyart/pyart-qpe#quantitative-precipitation-estimate-qpe-analysis-with-py-art","position":3},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","lvl2":"Overview"},"type":"lvl2","url":"/foundations/pyart/pyart-qpe#overview","position":4},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","lvl2":"Overview"},"content":"Within this notebook, we will cover:\n\nCalculation of QPE from various radar fields\n\nGenearting a gridded QPE product\n\nComparison against operational models (MRMS)","type":"content","url":"/foundations/pyart/pyart-qpe#overview","position":5},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","lvl2":"Prerequisites"},"type":"lvl2","url":"/foundations/pyart/pyart-qpe#prerequisites","position":6},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nPy-ART Basics\n\nHelpful\n\nBasic features\n\nWeather Radar Basics\n\nHelpful\n\nBackground Information\n\nMatplotlib Basics\n\nHelpful\n\nBasic plotting\n\nNumPy Basics\n\nHelpful\n\nBasic arrays\n\nXarray Basics\n\nHelpful\n\nMulti-dimensional arrays\n\nTime to learn: 15 minutes\n\n","type":"content","url":"/foundations/pyart/pyart-qpe#prerequisites","position":7},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","lvl2":"Imports"},"type":"lvl2","url":"/foundations/pyart/pyart-qpe#imports","position":8},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","lvl2":"Imports"},"content":"\n\nimport os\nimport warnings\nimport glob\n\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport xarray as xr\n\nimport pyart\nfrom pyart.testing import get_test_data\nimport xradar as xd\n\nwarnings.filterwarnings('ignore')\n\n","type":"content","url":"/foundations/pyart/pyart-qpe#imports","position":9},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","lvl2":"Investigate the Available Data"},"type":"lvl2","url":"/foundations/pyart/pyart-qpe#investigate-the-available-data","position":10},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","lvl2":"Investigate the Available Data"},"content":"\n\nfile_list = sorted(glob.glob(\"/data/project/ARM_Summer_School_2025/radar/csapr2/ppi/*20250519*\"))\nfile_list\n\ndt = xd.io.open_cfradial1_datatree(file_list[0])\ndt\n\nradar = pyart.xradar.Xradar(dt)\ndisplay = pyart.graph.RadarDisplay(radar)\n\nradar\n\n# Generate matplotlib figure and axe array objects\nfig, axarr = plt.subplots(2, 2, figsize=[20, 12])\nplt.subplots_adjust(hspace=0.35)\n\n# reflectivity\ndisplay.plot('reflectivity', sweep=0, ax=axarr[0, 0], cmap='ChaseSpectral')\n\n# differential reflectivity\ndisplay.plot(\"differential_reflectivity\", sweep=0, ax=axarr[0, 1], cmap=\"RdBu_r\", vmin=-2, vmax=2)\n\n# doppler velocity\ndisplay.plot(\"mean_doppler_velocity\", sweep=0, ax=axarr[1, 0], cmap=\"RdBu_r\", vmin=-16, vmax=16)\n\n# differential phase\ndisplay.plot(\"specific_differential_phase\", sweep=0, ax=axarr[1, 1], cmap=\"ChaseSpectral\")\n\n","type":"content","url":"/foundations/pyart/pyart-qpe#investigate-the-available-data","position":11},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","lvl2":"QPE Functions"},"type":"lvl2","url":"/foundations/pyart/pyart-qpe#qpe-functions","position":12},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","lvl2":"QPE Functions"},"content":"\n\ndef reflectivity_rain(radar, refl=\"reflectivity\", alpha=0.0376, beta=0.6112):\n    \"\"\"\n    Function to calculate rainfall rates from radar reflectivity factor\n\n    Inputs\n    ------\n    radar : Py-ART Radar Object\n        Py-ART radar object to extract reflectivity field from\n    refl : str\n        Specific name of reflectivity field within radar object\n    alpha : float\n        fit parameter\n    beta : float\n        fit parameter\n\n    Outputs\n    -------\n    radar : Py-ART Radar Object\n        Py-ART radar object with rainfall estimate from reflectivity included\n    \"\"\"\n    # define a gatefilter to apply the relationship to\n    gatefilter_z = pyart.correct.GateFilter(radar)\n    gatefilter_z.exclude_above(refl, 35)\n    # Apply the gatefilter to the rain rate\n    masked_z = np.ma.masked_array(radar.fields[refl]['data'], mask=gatefilter_z.gate_excluded) \n    # Apply the R(Z) relationship\n    rr_data = alpha * np.ma.power(np.ma.power(10.0, 0.1 * masked_z), beta)\n    # define the dictionary structure for the rain rate data\n    rain = pyart.config.get_metadata(\"radar_estimated_rain_rate\")\n    rain[\"long_name\"] = \"R(Z) Radar Estimated Rain Rate\"\n    rain[\"standard_name\"] = \"R(Z) Radar Estimated Rain Rate\"\n    rain[\"data\"] = rr_data\n    # add the field back into the radar object\n    radar.add_field(\"rain_z\", rain)\n\n    return radar\n\ndef kdp_rain(radar, phase=\"specific_differential_phase\", alpha=25.1, beta=0.777):\n    \"\"\"\n    Function to calculate rainfall rates from specific differential phase\n    Inputs\n    ------\n    radar : Py-ART Radar Object\n        Py-ART radar object to extract reflectivity field from\n    refl : str\n        Specific name of reflectivity field within radar object\n    alpha : float\n        fit parameter\n    beta : float\n        fit parameter\n\n    Outputs\n    -------\n    radar : Py-ART Radar Object\n        Py-ART radar object with rainfall estimate from reflectivity included\n    \"\"\"\n    # define a gatefilter to apply the relationship to\n    gatefilter_kdp = pyart.correct.GateFilter(radar)\n    gatefilter_kdp.exclude_below('reflectivity', 35)\n    # Apply the gatefilter to the rain rate\n    masked_z = np.ma.masked_array(radar.fields[phase]['data'], mask=gatefilter_kdp.gate_excluded) \n    # define the reflectivity data\n    reflect = radar.fields[phase][\"data\"]\n    rr_data = alpha * np.ma.power(np.ma.power(10.0, 0.1 * masked_z), beta)\n    # define the dictionary structure for the rain rate data\n    rain = pyart.config.get_metadata(\"radar_estimated_rain_rate\")\n    rain[\"long_name\"] = \"R(KDP) Radar Estimated Rain Rate\"\n    rain[\"standard_name\"] = \"R(KDP) Radar Estimated Rain Rate\"\n    rain[\"data\"] = rr_data\n    # add the field back into the radar object\n    radar.add_field(\"rain_kdp\", rain)\n\n    return radar\n\n# Apply the Radar estimated rain rates \nradar = reflectivity_rain(radar)\nradar = kdp_rain(radar)\nradar[\"sweep_1\"]\n\ndisplay = pyart.graph.RadarDisplay(radar)\n# Generate matplotlib figure and axe array objects\nfig, axarr = plt.subplots(1, 2, figsize=[14, 5])\nplt.subplots_adjust(wspace=0.2, hspace=0.35)\n\n# reflectivity\ndisplay.plot('rain_z', sweep=0, ax=axarr[0], cmap='ChaseSpectral')\n\n# differential reflectivity\ndisplay.plot(\"rain_kdp\", sweep=0, ax=axarr[1], cmap=\"RdBu_r\")\n\n","type":"content","url":"/foundations/pyart/pyart-qpe#qpe-functions","position":13},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","lvl2":"Combined Radar Estimated Rainfall Product"},"type":"lvl2","url":"/foundations/pyart/pyart-qpe#combined-radar-estimated-rainfall-product","position":14},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","lvl2":"Combined Radar Estimated Rainfall Product"},"content":"\n\nradar.fields[\"rain_z\"][\"data\"].mask\n\ncombined_data = np.where(~radar.fields[\"rain_z\"][\"data\"].mask, radar.fields[\"rain_z\"][\"data\"], radar.fields[\"rain_kdp\"][\"data\"])\n# Combine the masks using logical OR (mask where either is masked)\ncombined_mask = np.ma.mask_or(radar.fields[\"rain_z\"][\"data\"].mask, radar.fields[\"rain_kdp\"][\"data\"].mask)\n\n# Merge data and apply the combined mask\nmerged = np.ma.array(combined_data, mask=combined_mask)\n\ncombined_data\n\n# define the dictionary structure for the rain rate data\nrain = pyart.config.get_metadata(\"radar_estimated_rain_rate\")\nrain[\"long_name\"] = \"R(Z+KDP) Radar Estimated Rain Rate\"\nrain[\"standard_name\"] = \"R(Z+KDP) Radar Estimated Rain Rate\"\nrain[\"data\"] = combined_data\n# add the field back into the radar object\nradar.add_field(\"rain_combined\", rain)\n\ndisplay = pyart.graph.RadarDisplay(radar)\n# Generate matplotlib figure and axe array objects\nfig, axarr = plt.subplots(1, 2, figsize=[14, 5])\nplt.subplots_adjust(wspace=0.2, hspace=0.35)\n\n# reflectivity\ndisplay.plot('rain_combined', sweep=0, ax=axarr[0], cmap='ChaseSpectral', vmax=10)\n# reflectivity\ndisplay.plot('reflectivity', sweep=0, ax=axarr[1], cmap='ChaseSpectral')\n\n","type":"content","url":"/foundations/pyart/pyart-qpe#combined-radar-estimated-rainfall-product","position":15},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","lvl2":"Create a Gridded QPE Product for Future Comparison with Model/MRMS"},"type":"lvl2","url":"/foundations/pyart/pyart-qpe#create-a-gridded-qpe-product-for-future-comparison-with-model-mrms","position":16},{"hierarchy":{"lvl1":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","lvl2":"Create a Gridded QPE Product for Future Comparison with Model/MRMS"},"content":"\n\ndef bnf_grid(radar, \n             z_limits=(250., 15_000.), \n             y_limits=(-30_000., 30_000), \n             x_limits=(-30_000., 30_000),\n             resolution=250\n):\n    \"\"\"\n    Function to create a Py-ART grid object from a given radar file\n\n    Inputs\n    ------\n    radar : Py-ART radar object\n        Py-ART radar object to create a grid object from\n    z_limits : tuple\n        vertical dimension grid limits\n    y_limits : tuple\n        longitude dimension grid limits\n    x_limits : tuple\n        latitude dimension grid limits\n    resolution : float\n        desired resolution of our grid object\n\n    Calls\n    -----\n    compute_number_of_points\n        compute number of gates in each direction\n\n    Outputs\n    -------\n    grid : Py-ART Grid object\n    \"\"\"\n    def compute_number_of_points(extent, resolution):\n        return int((extent[1] - extent[0])/resolution)\n\n    z_grid_points = compute_number_of_points(z_limits, resolution)\n    x_grid_points = compute_number_of_points(x_limits, resolution)\n    y_grid_points = compute_number_of_points(y_limits, resolution)\n\n    grid = pyart.map.grid_from_radars([radar],\n                                      grid_shape=(z_grid_points,\n                                                  y_grid_points,\n                                                  x_grid_points),\n                                      grid_limits=(z_grid_limits,\n                                                   y_grid_limits,\n                                                   x_grid_limits),\n    )\n\n    return grid\n\ngrid = bnf_grid(radar)\n\ndisplay = pyart.graph.GridMapDisplay(grid)\ndisplay.plot_grid('rain_combined',\n                  level=1,\n                  vmin=0.1,\n                  vmax=15,\n                  cmap='HomeyerRainbow')","type":"content","url":"/foundations/pyart/pyart-qpe#create-a-gridded-qpe-product-for-future-comparison-with-model-mrms","position":17},{"hierarchy":{"lvl1":"Introduction to Radar Meteorology with ARM"},"type":"lvl1","url":"/foundations/pyart/radars-with-arm","position":0},{"hierarchy":{"lvl1":"Introduction to Radar Meteorology with ARM"},"content":"\n\n","type":"content","url":"/foundations/pyart/radars-with-arm","position":1},{"hierarchy":{"lvl1":"Introduction to Radar Meteorology with ARM"},"type":"lvl1","url":"/foundations/pyart/radars-with-arm#introduction-to-radar-meteorology-with-arm","position":2},{"hierarchy":{"lvl1":"Introduction to Radar Meteorology with ARM"},"content":"\n\n","type":"content","url":"/foundations/pyart/radars-with-arm#introduction-to-radar-meteorology-with-arm","position":3},{"hierarchy":{"lvl1":"Introduction to Radar Meteorology with ARM","lvl2":"Overview"},"type":"lvl2","url":"/foundations/pyart/radars-with-arm#overview","position":4},{"hierarchy":{"lvl1":"Introduction to Radar Meteorology with ARM","lvl2":"Overview"},"content":"Within this notebook, we will cover:\n\nGeneral structure of radar data\n\nRadar Scanning\n\nLook at various ARM radars\n\nDo a simple analysis\n\n","type":"content","url":"/foundations/pyart/radars-with-arm#overview","position":5},{"hierarchy":{"lvl1":"Introduction to Radar Meteorology with ARM","lvl2":"Prerequisites"},"type":"lvl2","url":"/foundations/pyart/radars-with-arm#prerequisites","position":6},{"hierarchy":{"lvl1":"Introduction to Radar Meteorology with ARM","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nIntro to Cartopy\n\nHelpful\n\nBasic features\n\nMatplotlib Basics\n\nHelpful\n\nBasic plotting\n\nNumPy Basics\n\nHelpful\n\nBasic arrays\n\nTime to learn: 45 minutes\n\nimport os\nimport warnings\n\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\n\nimport matplotlib.pyplot as plt\n\nimport pyart\nfrom pyart.testing import get_test_data\nimport xradar as xd\nimport numpy as np\n\nwarnings.filterwarnings(\"ignore\")\n\nWe will use Py-ART to investigate data. This is not a Py-ART tutorial. Also this notebook is limited to moment data and will not cover lower level data such as doppler spectra.\n\n","type":"content","url":"/foundations/pyart/radars-with-arm#prerequisites","position":7},{"hierarchy":{"lvl1":"Introduction to Radar Meteorology with ARM","lvl2":"ARM Radars"},"type":"lvl2","url":"/foundations/pyart/radars-with-arm#arm-radars","position":8},{"hierarchy":{"lvl1":"Introduction to Radar Meteorology with ARM","lvl2":"ARM Radars"},"content":"\n\nARM’s main radars can be broken down into two categories: Scanning and zenith pointing. ARM operates radars at four requency bands: W, Ka, X and C band. ARM denotes radars as either cloud or precipitation sensing. W and Ka are only denoted as cloud sensing, X is both and C is only precipitation sensing. The radars are the Marine W-Band ARM Cloud Radar (M-WACR), Ka band Zenith Radar (Ka-ZR), Ka band ARM Scanning Cloud Radar (Ka-SACR), X band Scanning ARM Radar (X-SACR), X band Scanning ARM Precipition Radar (X-SAPR) and C band Scanning ARM Precipitation Radar (C-SAPR). The notation pertain more to the operation and suitability of the radar (eg there is nothing stopping a user using KAZR to study Precipitation).\n\n\n\nBNF has a C-SAPR, X-SACR, Ka-SACR and a KaZR. Why the different wavelengths? it all comes down to sensitivity, backscatter cross section and if the scattering is in the Reighley regieme where the size of the drops are much smaller than the wavelenth.\n\n\n\nThe sensitivity gains come from the beam with can be approximated as \\theta\\approx 1.22 \\frac{\\lambda}{D}\\quad(\\text{considering that}\\,\\sin\\theta\\approx\\theta). Bigger antenna smaller angle. Shorter wavelength smaller angle. And a smaller angle means you can squeeze more power into a volume.\n\nThe power recieved by a radar can be written as:\n\nP_r = \\frac{\\pi^3 c}{1024 \\ln(2)} \\cdot \\frac{P_t G^2 \\theta^2 h |\\kappa|^2 Z}{\\lambda^2 r^2}\n\nThis can be broken down to components intrinsic to the radar and the medium:\n\nP_r = \\underbrace{\\frac{P_t G^2 \\lambda^2 c \\tau}{(4\\pi)^3}}_{\\text{Radar}} \\underbrace{\\frac{\\pi^5 |K|^2}{\\lambda^4} \\frac{1}{R^2} \\sum D_i^6}_{\\text{Hydrometeors}}\n\nThe last component, the sum over all distribited scatters is, as described in the previous talk one of the basic measures from a radar is reflectivity factor:\n\nZ = \\int_{0}^{Dmax} N D^6\\mathrm{d}D \n\nAs long as D < \\lambda reflectivity factor is wavelength invariant.\n\n","type":"content","url":"/foundations/pyart/radars-with-arm#arm-radars","position":9},{"hierarchy":{"lvl1":"Introduction to Radar Meteorology with ARM","lvl2":"Lets dig into some data to give some examples:"},"type":"lvl2","url":"/foundations/pyart/radars-with-arm#lets-dig-into-some-data-to-give-some-examples","position":10},{"hierarchy":{"lvl1":"Introduction to Radar Meteorology with ARM","lvl2":"Lets dig into some data to give some examples:"},"content":"\n\nkazr = pyart.io.read('bnfkazr2cfrgeM1.a1.20250422.040000.nc')\n\ncsapr.metadata['doi']\n\nhttps://​www​.osti​.gov​/dataexplorer​/biblio​/dataset​/1467901​-band​-scanning​-arm​-precipitation​-radar​-generation\n\nBharadwaj, Nitin, Collis, Scott, Hardin, Joseph, Isom, Bradley, Lindenmaier, Iosif, Matthews, Alyssa, Nelson, Danny, Feng, Ya-Chien, Rocque, Marquette, Wendler, Tim, and Castro, Vagner. C-Band Scanning ARM Precipitation Radar, 2nd Generation. United States: N. p., 2021. Web. doi:10.5439/1467901.\n\nkazr.info()\n\nkazr.fields['reflectivity']\n\nLets make a plot of the data. Nothing fancy here:\n\nplt.pcolormesh(kazr.fields['reflectivity']['data'])\nplt.colorbar()\n\nLets make it nicer!\n\nmy_favorite_colormap = pyart.graph.cmweather.cm_colorblind.ChaseSpectral\nplt.pcolormesh(kazr.fields['reflectivity']['data'].transpose(), cmap=my_favorite_colormap)\nplt.colorbar()\n\nBeing a vertical pointing radar the geometry is simple, a time height cross section.\n\nLets look at a scanning radar, a Ka band scanning cloud radar.\n\nkasacr = pyart.io.read('bnfkasacrcfrS4.a1.20250422.040001.nc')\n\nplt.pcolormesh(kasacr.fields['reflectivity']['data'].transpose(), cmap=my_favorite_colormap)\nplt.colorbar()\n\nok! This is a little more complex! Here the antenna is moving. Lets look at the geometry.\n\n#Lets look at Azimuth\nplt.plot(kasacr.azimuth['data'])\n\nplt.plot(kasacr.elevation['data'])\n\nmyd = pyart.graph.RadarDisplay(kasacr)\nmyd.plot_ppi('reflectivity', cmap=my_favorite_colormap)\n\n","type":"content","url":"/foundations/pyart/radars-with-arm#lets-dig-into-some-data-to-give-some-examples","position":11},{"hierarchy":{"lvl1":"Introduction to Radar Meteorology with ARM","lvl2":"Now lets look at C-SAPR"},"type":"lvl2","url":"/foundations/pyart/radars-with-arm#now-lets-look-at-c-sapr","position":12},{"hierarchy":{"lvl1":"Introduction to Radar Meteorology with ARM","lvl2":"Now lets look at C-SAPR"},"content":"\n\ncsapr = pyart.io.read('bnfcsapr2cfrS3.a1.20250422.040012.nc')\n\nplt.plot(csapr.azimuth['data'])\n\nmydc = pyart.graph.RadarDisplay(csapr)\nmydc.plot_ppi('reflectivity', cmap=my_favorite_colormap)\n\nalt = kazr.gate_z['data']\ndbz = kazr.fields['reflectivity']['data']\n\nfreq, height_edges, field_edges = np.histogram2d(\n        alt.data.flatten(),\n        dbz.data.flatten(), \n        bins = [np.linspace(0,15000,99), np.linspace(-60., 20., 79)])\n      \n\nX, Y = np.meshgrid(height_edges, field_edges)\nplt.pcolormesh(Y, X, freq.transpose(), cmap=my_favorite_colormap)\nplt.colorbar()\n\n\nalt = csapr.gate_z['data']\ndbz = csapr.fields['reflectivity']['data']\nfreq, height_edges, field_edges = np.histogram2d(\n        alt.data.flatten(),\n        dbz.data.flatten(), \n        bins = [np.linspace(0,15000,99), np.linspace(-40., 40., 79)])\n\nX, Y = np.meshgrid(height_edges, field_edges)\nplt.pcolormesh(Y, X, freq.transpose(), cmap=my_favorite_colormap)\nplt.colorbar()\n\n\nalt = kasacr.gate_z['data']\ndbz = kasacr.fields['reflectivity']['data']\nfreq, height_edges, field_edges = np.histogram2d(\n        alt.data.flatten(),\n        dbz.data.flatten(), \n        bins = [np.linspace(0,2000,39), np.linspace(-40., 40., 39)])\n\nX, Y = np.meshgrid(height_edges, field_edges)\nplt.pcolormesh(Y, X, freq.transpose(), cmap=my_favorite_colormap)\nplt.colorbar()\n\n\nNumber one rule of reflectivity club: Do math in linear units!\n\nAs an example lets look at rainfall retrievals. One of the simplest way of doing a rainfall retrieval is to use a simple power law rainfall relation or, “Z R relation” of the form Z=aR^b. So R=(Z \\frac{1}{a})^{1/b}\n\na_value=300.0\nb_value=1.4\n\n#Grab reflectivity value\nrefl = csapr.fields['reflectivity'][\"data\"]\n\n#Make linear reflectivity\nlinear_refl = 10.0**(refl/10.0)\n\n#Retrieve rain rate\nrr_data = ((1.0/a_value) * linear_refl)**(1.0/b_value)\n\n#make a Py-ART field object\nrain = pyart.config.get_metadata(\"radar_estimated_rain_rate\")\nrain[\"data\"] = rr_data\n\n#Add it back onto the radar object\ncsapr.add_field('radar_estimated_rain_rate', rain, replace_existing=True)\n\n\nmydc = pyart.graph.RadarDisplay(csapr)\nmydc.plot_ppi('radar_estimated_rain_rate')\n\n","type":"content","url":"/foundations/pyart/radars-with-arm#now-lets-look-at-c-sapr","position":13},{"hierarchy":{"lvl1":"Dask Demo"},"type":"lvl1","url":"/foundations/xarray/dask-xarray-demo","position":0},{"hierarchy":{"lvl1":"Dask Demo"},"content":"import xarray as xr\nimport glob\nfrom distributed import Client\nimport xwrf\n\nclient = Client(\"tcp://127.0.0.1:40447\")\nclient\n\nfiles = glob.glob(\"/data/project/ARM_Summer_School_2024_Data/lasso_tutorial/cacti/lasso-cacti/20190129/eda09/base/les/subset_d4/corlasso_met_*\")\n\nds = xr.open_dataset(files[0])\n\nds = xr.open_mfdataset(files[:10],\n                       chunks={},\n                       coords=\"minimal\")\n\narea_mean_t = ds.mean(dim=[\"south_north\", \"west_east\"])\n\nsubset = area_mean_t[[\"HAMSL\", \"TEMPERATURE\", \"QVAPOR\", \"UA\", \"VA\", \"REFL_10CM_MAX\"]]\n\narea_mean_t = subset.compute()\n\narea_mean_t = area_mean_t.set_coords(\"HAMSL\")\n\narea_mean_t.UA.plot(x='Time', y='HAMSL')\n\nclient.shutdown()","type":"content","url":"/foundations/xarray/dask-xarray-demo","position":1},{"hierarchy":{"lvl1":"Introduction to Xarray"},"type":"lvl1","url":"/foundations/xarray/xarray-intro","position":0},{"hierarchy":{"lvl1":"Introduction to Xarray"},"content":"","type":"content","url":"/foundations/xarray/xarray-intro","position":1},{"hierarchy":{"lvl1":"Introduction to Xarray"},"type":"lvl1","url":"/foundations/xarray/xarray-intro#introduction-to-xarray","position":2},{"hierarchy":{"lvl1":"Introduction to Xarray"},"content":"\n\n\n\n","type":"content","url":"/foundations/xarray/xarray-intro#introduction-to-xarray","position":3},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Overview"},"type":"lvl2","url":"/foundations/xarray/xarray-intro#overview","position":4},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Overview"},"content":"This notebook will introduce the basics of gridded, labeled data with Xarray. Since Xarray introduces additional abstractions on top of plain arrays of data, our goal is to show why these abstractions are useful and how they frequently lead to simpler, more robust code.\n\nWe’ll cover these topics:\n\nCreate a DataArray, one of the core object types in Xarray\n\nUnderstand how to use named coordinates and metadata in a DataArray\n\nCombine individual DataArrays into a Dataset, the other core object type in Xarray\n\nSubset, slice, and interpolate the data using named coordinates\n\nOpen netCDF data using XArray\n\nBasic subsetting and aggregation of a Dataset\n\nBrief introduction to plotting with Xarray\n\n","type":"content","url":"/foundations/xarray/xarray-intro#overview","position":5},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Prerequisites"},"type":"lvl2","url":"/foundations/xarray/xarray-intro#prerequisites","position":6},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nNumPy Basics\n\nNecessary\n\n\n\nIntermediate NumPy\n\nHelpful\n\nFamiliarity with indexing and slicing arrays\n\nNumPy Broadcasting\n\nHelpful\n\nFamiliar with array arithmetic and broadcasting\n\nIntroduction to Pandas\n\nHelpful\n\nFamiliarity with labeled data\n\nDatetime\n\nHelpful\n\nFamiliarity with time formats and the timedelta object\n\nUnderstanding of NetCDF\n\nHelpful\n\nFamiliarity with metadata structure\n\nTime to learn: 30 minutes\n\n\n\n","type":"content","url":"/foundations/xarray/xarray-intro#prerequisites","position":7},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Imports"},"type":"lvl2","url":"/foundations/xarray/xarray-intro#imports","position":8},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Imports"},"content":"\n\nSimmilar to numpy, np; pandas, pd; you may often encounter xarray imported within a shortened namespace as xr.\n\nfrom datetime import timedelta\n\nimport cmweather\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nimport glob\n\nfrom bokeh.models.formatters import DatetimeTickFormatter\nimport hvplot.xarray\nimport holoviews as hv\nhv.extension(\"bokeh\")\n\n","type":"content","url":"/foundations/xarray/xarray-intro#imports","position":9},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl2","url":"/foundations/xarray/xarray-intro#introducing-the-dataarray-and-dataset","position":10},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Introducing the DataArray and Dataset"},"content":"Xarray expands on the capabilities on NumPy arrays, providing a lot of streamlined data manipulation. It is similar in that respect to Pandas, but whereas Pandas excels at working with tabular data, Xarray is focused on N-dimensional arrays of data (i.e. grids). Its interface is based largely on the netCDF data model (variables, attributes, and dimensions), but it goes beyond the traditional netCDF interfaces to provide functionality similar to netCDF-java’s \n\nCommon Data Model (CDM).\n\n","type":"content","url":"/foundations/xarray/xarray-intro#introducing-the-dataarray-and-dataset","position":11},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Creation of a DataArray object","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#creation-of-a-dataarray-object","position":12},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Creation of a DataArray object","lvl2":"Introducing the DataArray and Dataset"},"content":"The DataArray is one of the basic building blocks of Xarray (see docs \n\nhere). It provides a numpy.ndarray-like object that expands to provide two critical pieces of functionality:\n\nCoordinate names and values are stored with the data, making slicing and indexing much more powerful\n\nIt has a built-in container for attributes\n\nHere we’ll initialize a DataArray object by wrapping a plain NumPy array, and explore a few of its properties.\n\n","type":"content","url":"/foundations/xarray/xarray-intro#creation-of-a-dataarray-object","position":13},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Generate a random numpy array","lvl3":"Creation of a DataArray object","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl4","url":"/foundations/xarray/xarray-intro#generate-a-random-numpy-array","position":14},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Generate a random numpy array","lvl3":"Creation of a DataArray object","lvl2":"Introducing the DataArray and Dataset"},"content":"For our first example, we’ll just create a random array of “temperature” data in units of Kelvin:\n\ndata = 283 + 5 * np.random.randn(5, 3, 4)\ndata\n\n","type":"content","url":"/foundations/xarray/xarray-intro#generate-a-random-numpy-array","position":15},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Wrap the array: first attempt","lvl3":"Creation of a DataArray object","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl4","url":"/foundations/xarray/xarray-intro#wrap-the-array-first-attempt","position":16},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Wrap the array: first attempt","lvl3":"Creation of a DataArray object","lvl2":"Introducing the DataArray and Dataset"},"content":"Now we create a basic DataArray just by passing our plain data as input:\n\ntemp = xr.DataArray(data)\ntemp\n\nNote two things:\n\nXarray generates some basic dimension names for us (dim_0, dim_1, dim_2). We’ll improve this with better names in the next example.\n\nWrapping the numpy array in a DataArray gives us a rich display in the notebook! (Try clicking the array symbol to expand or collapse the view)\n\n","type":"content","url":"/foundations/xarray/xarray-intro#wrap-the-array-first-attempt","position":17},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Assign dimension names","lvl3":"Creation of a DataArray object","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl4","url":"/foundations/xarray/xarray-intro#assign-dimension-names","position":18},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Assign dimension names","lvl3":"Creation of a DataArray object","lvl2":"Introducing the DataArray and Dataset"},"content":"Much of the power of Xarray comes from making use of named dimensions. So let’s add some more useful names! We can do that by passing an ordered list of names using the keyword argument dims:\n\ntemp = xr.DataArray(data, dims=['time', 'lat', 'lon'])\ntemp\n\nThis is already improved upon from a NumPy array, because we have names for each of the dimensions (or axes in NumPy parlance). Even better, we can take arrays representing the values for the coordinates for each of these dimensions and associate them with the data when we create the DataArray. We’ll see this in the next example.\n\n","type":"content","url":"/foundations/xarray/xarray-intro#assign-dimension-names","position":19},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Create a DataArray with named Coordinates","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#create-a-dataarray-with-named-coordinates","position":20},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Create a DataArray with named Coordinates","lvl2":"Introducing the DataArray and Dataset"},"content":"","type":"content","url":"/foundations/xarray/xarray-intro#create-a-dataarray-with-named-coordinates","position":21},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Make time and space coordinates","lvl3":"Create a DataArray with named Coordinates","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl4","url":"/foundations/xarray/xarray-intro#make-time-and-space-coordinates","position":22},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Make time and space coordinates","lvl3":"Create a DataArray with named Coordinates","lvl2":"Introducing the DataArray and Dataset"},"content":"Here we will use \n\nPandas to create an array of \n\ndatetime data, which we will then use to create a DataArray with a named coordinate time.\n\ntimes = pd.date_range('2018-01-01', periods=5)\ntimes\n\nWe’ll also create arrays to represent sample longitude and latitude:\n\nlons = np.linspace(-120, -60, 4)\nlats = np.linspace(25, 55, 3)\n\n","type":"content","url":"/foundations/xarray/xarray-intro#make-time-and-space-coordinates","position":23},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Initialize the DataArray with complete coordinate info","lvl3":"Create a DataArray with named Coordinates","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl4","url":"/foundations/xarray/xarray-intro#initialize-the-dataarray-with-complete-coordinate-info","position":24},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Initialize the DataArray with complete coordinate info","lvl3":"Create a DataArray with named Coordinates","lvl2":"Introducing the DataArray and Dataset"},"content":"When we create the DataArray instance, we pass in the arrays we just created:\n\ntemp = xr.DataArray(data, coords=[times, lats, lons], dims=['time', 'lat', 'lon'])\ntemp\n\n","type":"content","url":"/foundations/xarray/xarray-intro#initialize-the-dataarray-with-complete-coordinate-info","position":25},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Set useful attributes","lvl3":"Create a DataArray with named Coordinates","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl4","url":"/foundations/xarray/xarray-intro#set-useful-attributes","position":26},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Set useful attributes","lvl3":"Create a DataArray with named Coordinates","lvl2":"Introducing the DataArray and Dataset"},"content":"...and while we’re at it, we can also set some attribute metadata:\n\ntemp.attrs['units'] = 'kelvin'\ntemp.attrs['standard_name'] = 'air_temperature'\n\ntemp\n\n","type":"content","url":"/foundations/xarray/xarray-intro#set-useful-attributes","position":27},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Attributes are not preserved by default!","lvl3":"Create a DataArray with named Coordinates","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl4","url":"/foundations/xarray/xarray-intro#attributes-are-not-preserved-by-default","position":28},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Attributes are not preserved by default!","lvl3":"Create a DataArray with named Coordinates","lvl2":"Introducing the DataArray and Dataset"},"content":"Notice what happens if we perform a mathematical operaton with the DataArray: the coordinate values persist, but the attributes are lost. This is done because it is very challenging to know if the attribute metadata is still correct or appropriate after arbitrary arithmetic operations.\n\nTo illustrate this, we’ll do a simple unit conversion from Kelvin to Celsius:\n\ntemp_in_celsius = temp - 273.15\ntemp_in_celsius\n\nFor an in-depth discussion of how Xarray handles metadata, start in the Xarray docs \n\nhere.\n\n","type":"content","url":"/foundations/xarray/xarray-intro#attributes-are-not-preserved-by-default","position":29},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"The Dataset: a container for DataArrays with shared coordinates","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#the-dataset-a-container-for-dataarrays-with-shared-coordinates","position":30},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"The Dataset: a container for DataArrays with shared coordinates","lvl2":"Introducing the DataArray and Dataset"},"content":"Along with DataArray, the other key object type in Xarray is the Dataset: a dictionary-like container that holds one or more DataArrays, which can also optionally share coordinates (see docs \n\nhere).\n\nThe most common way to create a Dataset object is to load data from a file (see \n\nbelow). Here, instead, we will create another DataArray and combine it with our temp data.\n\nThis will illustrate how the information about common coordinate axes is used.\n\n","type":"content","url":"/foundations/xarray/xarray-intro#the-dataset-a-container-for-dataarrays-with-shared-coordinates","position":31},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Create a pressure DataArray using the same coordinates","lvl3":"The Dataset: a container for DataArrays with shared coordinates","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl4","url":"/foundations/xarray/xarray-intro#create-a-pressure-dataarray-using-the-same-coordinates","position":32},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Create a pressure DataArray using the same coordinates","lvl3":"The Dataset: a container for DataArrays with shared coordinates","lvl2":"Introducing the DataArray and Dataset"},"content":"This code mirrors how we created the temp object above.\n\npressure_data = 1000.0 + 5 * np.random.randn(5, 3, 4)\npressure = xr.DataArray(\n    pressure_data, coords=[times, lats, lons], dims=['time', 'lat', 'lon']\n)\npressure.attrs['units'] = 'hPa'\npressure.attrs['standard_name'] = 'air_pressure'\n\npressure\n\n","type":"content","url":"/foundations/xarray/xarray-intro#create-a-pressure-dataarray-using-the-same-coordinates","position":33},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Create a Dataset object","lvl3":"The Dataset: a container for DataArrays with shared coordinates","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl4","url":"/foundations/xarray/xarray-intro#create-a-dataset-object","position":34},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Create a Dataset object","lvl3":"The Dataset: a container for DataArrays with shared coordinates","lvl2":"Introducing the DataArray and Dataset"},"content":"Each DataArray in our Dataset needs a name!\n\nThe most straightforward way to create a Dataset with our temp and pressure arrays is to pass a dictionary using the keyword argument data_vars:\n\nds = xr.Dataset(data_vars={'Temperature': temp, 'Pressure': pressure})\nds\n\nNotice that the Dataset object ds is aware that both data arrays sit on the same coordinate axes.\n\n","type":"content","url":"/foundations/xarray/xarray-intro#create-a-dataset-object","position":35},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Access Data variables and Coordinates in a Dataset","lvl3":"The Dataset: a container for DataArrays with shared coordinates","lvl2":"Introducing the DataArray and Dataset"},"type":"lvl4","url":"/foundations/xarray/xarray-intro#access-data-variables-and-coordinates-in-a-dataset","position":36},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Access Data variables and Coordinates in a Dataset","lvl3":"The Dataset: a container for DataArrays with shared coordinates","lvl2":"Introducing the DataArray and Dataset"},"content":"We can pull out any of the individual DataArray objects in a few different ways.\n\nUsing the “dot” notation:\n\nds.Pressure\n\n... or using dictionary access like this:\n\nds['Pressure']\n\nWe’ll return to the Dataset object when we start loading data from files.\n\n","type":"content","url":"/foundations/xarray/xarray-intro#access-data-variables-and-coordinates-in-a-dataset","position":37},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Subsetting and selection by coordinate values"},"type":"lvl2","url":"/foundations/xarray/xarray-intro#subsetting-and-selection-by-coordinate-values","position":38},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Subsetting and selection by coordinate values"},"content":"Much of the power of labeled coordinates comes from the ability to select data based on coordinate names and values, rather than array indices. We’ll explore this briefly here.","type":"content","url":"/foundations/xarray/xarray-intro#subsetting-and-selection-by-coordinate-values","position":39},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"NumPy-like selection","lvl2":"Subsetting and selection by coordinate values"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#numpy-like-selection","position":40},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"NumPy-like selection","lvl2":"Subsetting and selection by coordinate values"},"content":"Suppose we want to extract all the spatial data for one single date: January 2, 2018. It’s possible to achieve that with NumPy-like index selection:\n\nindexed_selection = temp[1, :, :]  # Index 1 along axis 0 is the time slice we want...\nindexed_selection\n\nHOWEVER, notice that this requires us (the user / programmer) to have detailed knowledge of the order of the axes and the meaning of the indices along those axes!\n\nNamed coordinates free us from this burden...\n\n","type":"content","url":"/foundations/xarray/xarray-intro#numpy-like-selection","position":41},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Selecting with .sel()","lvl2":"Subsetting and selection by coordinate values"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#selecting-with-sel","position":42},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Selecting with .sel()","lvl2":"Subsetting and selection by coordinate values"},"content":"We can instead select data based on coordinate values using the .sel() method, which takes one or more named coordinate(s) as keyword argument:\n\nnamed_selection = temp.sel(time='2018-01-02')\nnamed_selection\n\nWe got the same result, but\n\nwe didn’t have to know anything about how the array was created or stored\n\nour code is agnostic about how many dimensions we are dealing with\n\nthe intended meaning of our code is much clearer!\n\n","type":"content","url":"/foundations/xarray/xarray-intro#selecting-with-sel","position":43},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Approximate selection and interpolation","lvl2":"Subsetting and selection by coordinate values"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#approximate-selection-and-interpolation","position":44},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Approximate selection and interpolation","lvl2":"Subsetting and selection by coordinate values"},"content":"With time and space data, we frequently want to sample “near” the coordinate points in our dataset. Here are a few simple ways to achieve that.","type":"content","url":"/foundations/xarray/xarray-intro#approximate-selection-and-interpolation","position":45},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Nearest-neighbor sampling","lvl3":"Approximate selection and interpolation","lvl2":"Subsetting and selection by coordinate values"},"type":"lvl4","url":"/foundations/xarray/xarray-intro#nearest-neighbor-sampling","position":46},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Nearest-neighbor sampling","lvl3":"Approximate selection and interpolation","lvl2":"Subsetting and selection by coordinate values"},"content":"Suppose we want to sample the nearest datapoint within 2 days of date 2018-01-07. Since the last day on our time axis is 2018-01-05, this is well-posed.\n\n.sel has the flexibility to perform nearest neighbor sampling, taking an optional tolerance:\n\ntemp.sel(time='2018-01-07', method='nearest', tolerance=timedelta(days=2))\n\nwhere we see that .sel indeed pulled out the data for date 2018-01-05.\n\n","type":"content","url":"/foundations/xarray/xarray-intro#nearest-neighbor-sampling","position":47},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Interpolation","lvl3":"Approximate selection and interpolation","lvl2":"Subsetting and selection by coordinate values"},"type":"lvl4","url":"/foundations/xarray/xarray-intro#interpolation","position":48},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Interpolation","lvl3":"Approximate selection and interpolation","lvl2":"Subsetting and selection by coordinate values"},"content":"Suppose we want to extract a timeseries for Boulder (40°N, 105°W). Since lon=-105 is not a point on our longitude axis, this requires interpolation between data points.\n\nThe .interp() method (see the docs \n\nhere) works similarly to .sel(). Using .interp(), we can interpolate to any latitude/longitude location:\n\ntemp.interp(lon=-105, lat=40)\n\nInfoXarray's interpolation functionality requires the \n\nSciPy package!\n\n","type":"content","url":"/foundations/xarray/xarray-intro#interpolation","position":49},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Slicing along coordinates","lvl2":"Subsetting and selection by coordinate values"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#slicing-along-coordinates","position":50},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Slicing along coordinates","lvl2":"Subsetting and selection by coordinate values"},"content":"Frequently we want to select a range (or slice) along one or more coordinate(s). We can achieve this by passing a Python \n\nslice object to .sel(), as follows:\n\ntemp.sel(\n    time=slice('2018-01-01', '2018-01-03'), lon=slice(-110, -70), lat=slice(25, 45)\n)\n\nInfoThe calling sequence for slice always looks like slice(start, stop[, step]), where step is optional.\n\nNotice how the length of each coordinate axis has changed due to our slicing.\n\n","type":"content","url":"/foundations/xarray/xarray-intro#slicing-along-coordinates","position":51},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"One more selection method: .loc","lvl2":"Subsetting and selection by coordinate values"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#one-more-selection-method-loc","position":52},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"One more selection method: .loc","lvl2":"Subsetting and selection by coordinate values"},"content":"All of these operations can also be done within square brackets on the .loc attribute of the DataArray:\n\ntemp.loc['2018-01-02']\n\nThis is sort of in between the NumPy-style selectiontemp[1,:,:]\n\nand the fully label-based selection using .sel()\n\nWith .loc, we make use of the coordinate values, but lose the ability to specify the names of the various dimensions. Instead, the slicing must be done in the correct order:\n\ntemp.loc['2018-01-01':'2018-01-03', 25:45, -110:-70]\n\nOne advantage of using .loc is that we can use NumPy-style slice notation like 25:45, rather than the more verbose slice(25,45). But of course that also works:\n\ntemp.loc['2018-01-01':'2018-01-03', slice(25, 45), -110:-70]\n\nWhat doesn’t work is passing the slices in a different order:\n\n# This will generate an error\n# temp.loc[-110:-70, 25:45,'2018-01-01':'2018-01-03']\n\n","type":"content","url":"/foundations/xarray/xarray-intro#one-more-selection-method-loc","position":53},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Opening netCDF data"},"type":"lvl2","url":"/foundations/xarray/xarray-intro#opening-netcdf-data","position":54},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Opening netCDF data"},"content":"With its close ties to the netCDF data model, Xarray also supports netCDF as a first-class file format. This means it has easy support for opening netCDF datasets, so long as they conform to some of Xarray’s limitations (such as 1-dimensional coordinates).","type":"content","url":"/foundations/xarray/xarray-intro#opening-netcdf-data","position":55},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Access netCDF data with xr.open_dataset","lvl2":"Opening netCDF data"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#access-netcdf-data-with-xr-open-dataset","position":56},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Access netCDF data with xr.open_dataset","lvl2":"Opening netCDF data"},"content":"\n\nOnce we have a valid path to a data file that Xarray knows how to read, we can open it like this:\n\nds = xr.open_dataset(\"../data/comble/radar/anxkazrcfrgeqcM1.b1.20200312.000000.nc\").compute()\nds\n\n","type":"content","url":"/foundations/xarray/xarray-intro#access-netcdf-data-with-xr-open-dataset","position":57},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Read in Multiple Files Using open_mfdataset","lvl3":"Access netCDF data with xr.open_dataset","lvl2":"Opening netCDF data"},"type":"lvl4","url":"/foundations/xarray/xarray-intro#read-in-multiple-files-using-open-mfdataset","position":58},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Read in Multiple Files Using open_mfdataset","lvl3":"Access netCDF data with xr.open_dataset","lvl2":"Opening netCDF data"},"content":"\n\nfiles = sorted(glob.glob(\"../data/comble/radar/*\"))\nds = xr.open_mfdataset(files).compute()\n\n","type":"content","url":"/foundations/xarray/xarray-intro#read-in-multiple-files-using-open-mfdataset","position":59},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Subsetting the Dataset","lvl2":"Opening netCDF data"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#subsetting-the-dataset","position":60},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Subsetting the Dataset","lvl2":"Opening netCDF data"},"content":"Our call to xr.open_dataset() above returned a Dataset object that we’ve decided to call ds. We can then pull out individual fields:\n\nds.reflectivity\n\n(recall that we can also use dictionary syntax like ds['isobaric1'] to do the same thing)\n\n","type":"content","url":"/foundations/xarray/xarray-intro#subsetting-the-dataset","position":61},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Aggregation operations","lvl2":"Opening netCDF data"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#aggregation-operations","position":62},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Aggregation operations","lvl2":"Opening netCDF data"},"content":"Not only can you use the named dimensions for manual slicing and indexing of data, but you can also use it to control aggregation operations, like std (standard deviation):\n\nreflectivity = ds['reflectivity']\nreflectivity.std(dim=['range'])\n\nInfoAggregation methods for Xarray objects operate over the named coordinate dimension(s) specified by keyword argument dim. Compare to NumPy, where aggregations operate over specified numbered axes.\n\nUsing the sample dataset, we can calculate the temperature profile across our time period!\n\nref = ds.reflectivity\nref_lowest_5000m = ref.sel(range=slice(0., 5000))\nprof = ref_lowest_5000m.mean(dim=\"time\")\nprof\n\n","type":"content","url":"/foundations/xarray/xarray-intro#aggregation-operations","position":63},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Plotting with Xarray"},"type":"lvl2","url":"/foundations/xarray/xarray-intro#plotting-with-xarray","position":64},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Plotting with Xarray"},"content":"Another major benefit of using labeled data structures is that they enable automated plotting with sensible axis labels.","type":"content","url":"/foundations/xarray/xarray-intro#plotting-with-xarray","position":65},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Simple visualization with .plot()","lvl2":"Plotting with Xarray"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#simple-visualization-with-plot","position":66},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Simple visualization with .plot()","lvl2":"Plotting with Xarray"},"content":"Much like we saw in \n\nPandas, Xarray includes an interface to \n\nMatplotlib that we can access through the .plot() method of every DataArray.\n\nFor quick and easy data exploration, we can just call .plot() without any modifiers:\n\nprof.plot();\n\nHere Xarray has generated a line plot of the temperature data against the coordinate variable isobaric. Also the metadata are used to auto-generate axis labels and units.\n\n","type":"content","url":"/foundations/xarray/xarray-intro#simple-visualization-with-plot","position":67},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Customizing the plot","lvl2":"Plotting with Xarray"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#customizing-the-plot","position":68},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Customizing the plot","lvl2":"Plotting with Xarray"},"content":"As in Pandas, the .plot() method is mostly just a wrapper to Matplotlib, so we can customize our plot in familiar ways.\n\nIn this air temperature profile example, we would like to make two changes:\n\nswap the axes so that we have isobaric levels on the y (vertical) axis of the figure\n\nmake pressure decrease upward in the figure, so that up is up\n\nA few keyword arguments to our .plot() call will take care of this:\n\nprof.plot(y=\"range\")\n\n","type":"content","url":"/foundations/xarray/xarray-intro#customizing-the-plot","position":69},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Plotting 2D data","lvl2":"Plotting with Xarray"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#plotting-2d-data","position":70},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Plotting 2D data","lvl2":"Plotting with Xarray"},"content":"In the example above, the .plot() method produced a line plot.\n\nWhat if we call .plot() on a 2D array?\n\nref.sel(range=slice(0, 5000)).plot(y='range',\n                                   cmap='ChaseSpectral',\n                                   vmin=-40,\n                                   vmax=40)\n\nWe can also make this interactive!\n\nref.sel(range=slice(0, 5000)).hvplot(x='time',\n                                     y='range',\n                                     cmap='ChaseSpectral',\n                                     clim=(-20, 40),\n                                     rasterize=True)\n\nds.reflectivity.sel(range=slice(0, 5000)).plot(y='range', cmap='Spectral_r');\n\nds.reflectivity.sel(range=slice(0, 5000)).hvplot(x='time', y='range', cmap='Spectral_r', rasterize=True, clabel='Reflectivity (dBZ)')\n\n","type":"content","url":"/foundations/xarray/xarray-intro#plotting-2d-data","position":71},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Customize our Interactive Plots","lvl2":"Plotting with Xarray"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#customize-our-interactive-plots","position":72},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"Customize our Interactive Plots","lvl2":"Plotting with Xarray"},"content":"Our time axis doesn’t tell us much... we can change that! Also note that we add additional parameters to customize our view of the field.\n\nformatter = DatetimeTickFormatter(hours=\"%d %b %Y \\n %H:%M UTC\")\nreflectivity_plot = ds.reflectivity.sel(range=slice(0, 5000)).hvplot(x='time', y='range', cmap='Spectral_r', xformatter=formatter, clim=(-20, 40), rasterize=True, clabel='Reflectivity (dBZ)')\nreflectivity_plot\n\nAnd the same for velocity...\n\nvelocity_plot = ds.mean_doppler_velocity.sel(range=slice(0, 5000)).hvplot(x='time', y='range', cmap='seismic', xformatter=formatter, clim=(-5, 5), rasterize=True, clabel='Mean Doppler Velocity (m/s)')\nvelocity_plot\n\n","type":"content","url":"/foundations/xarray/xarray-intro#customize-our-interactive-plots","position":73},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Combine our Plots","lvl3":"Customize our Interactive Plots","lvl2":"Plotting with Xarray"},"type":"lvl4","url":"/foundations/xarray/xarray-intro#combine-our-plots","position":74},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl4":"Combine our Plots","lvl3":"Customize our Interactive Plots","lvl2":"Plotting with Xarray"},"content":"Now that we have our interactive plots, we can combine them using +\n\nreflectivity_plot + velocity_plot\n\nOr stacked on top of each other...\n\n(reflectivity_plot + velocity_plot).cols(1)\n\n\n\n","type":"content","url":"/foundations/xarray/xarray-intro#combine-our-plots","position":75},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Summary"},"type":"lvl2","url":"/foundations/xarray/xarray-intro#summary","position":76},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Summary"},"content":"Xarray brings the joy of Pandas-style labeled data operations to N-dimensional data. As such, it has become a central workhorse in the geoscience community for the analysis of gridded datasets. Xarray allows us to open self-describing NetCDF files and make full use of the coordinate axes, labels, units, and other metadata. By making use of labeled coordinates, our code is often easier to write, easier to read, and more robust.\n\nWe also covered some interactive plots using xarray and hvPlot!","type":"content","url":"/foundations/xarray/xarray-intro#summary","position":77},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"What’s next?","lvl2":"Summary"},"type":"lvl3","url":"/foundations/xarray/xarray-intro#whats-next","position":78},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl3":"What’s next?","lvl2":"Summary"},"content":"Additional notebooks to appear in this section will go into more detail about\n\narithemtic and broadcasting with Xarray data structures\n\nusing “group by” operations\n\nremote data access with OpenDAP\n\nmore advanced visualization including map integration with Cartopy\n\n","type":"content","url":"/foundations/xarray/xarray-intro#whats-next","position":79},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Resources and references"},"type":"lvl2","url":"/foundations/xarray/xarray-intro#resources-and-references","position":80},{"hierarchy":{"lvl1":"Introduction to Xarray","lvl2":"Resources and references"},"content":"This notebook was adapated from material in \n\nUnidata’s Python Training.\n\nThe best resource for Xarray is the \n\nXarray documentation. See in particular\n\nWhy Xarray\n\nQuick overview\n\nExample gallery\n\nAnother excellent resource is this \n\nXarray Tutorial collection.","type":"content","url":"/foundations/xarray/xarray-intro#resources-and-references","position":81},{"hierarchy":{"lvl1":"Introduction to xwrf"},"type":"lvl1","url":"/foundations/xarray/xwrf-xarray-intro","position":0},{"hierarchy":{"lvl1":"Introduction to xwrf"},"content":"","type":"content","url":"/foundations/xarray/xwrf-xarray-intro","position":1},{"hierarchy":{"lvl1":"Introduction to xwrf"},"type":"lvl1","url":"/foundations/xarray/xwrf-xarray-intro#introduction-to-xwrf","position":2},{"hierarchy":{"lvl1":"Introduction to xwrf"},"content":"\n\n\n\n","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#introduction-to-xwrf","position":3},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Overview"},"type":"lvl2","url":"/foundations/xarray/xwrf-xarray-intro#overview","position":4},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Overview"},"content":"This notebook will introduce the basics of gridded, labeled data with Xarray. Since Xarray introduces additional abstractions on top of plain arrays of data, our goal is to show why these abstractions are useful and how they frequently lead to simpler, more robust code.\n\nWe’ll cover these topics:\n\nCreate a DataArray, one of the core object types in Xarray\n\nUnderstand how to use named coordinates and metadata in a DataArray\n\nCombine individual DataArrays into a Dataset, the other core object type in Xarray\n\nSubset, slice, and interpolate the data using named coordinates\n\nOpen netCDF data using XArray\n\nBasic subsetting and aggregation of a Dataset\n\nBrief introduction to plotting with Xarray\n\n","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#overview","position":5},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Prerequisites"},"type":"lvl2","url":"/foundations/xarray/xwrf-xarray-intro#prerequisites","position":6},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nNumPy Basics\n\nNecessary\n\n\n\nIntroduction to Xarray\n\nNeccessary\n\nUnderstanding of data structures\n\nIntermediate NumPy\n\nHelpful\n\nFamiliarity with indexing and slicing arrays\n\nDatetime\n\nHelpful\n\nFamiliarity with time formats and the timedelta object\n\nUnderstanding of NetCDF\n\nHelpful\n\nFamiliarity with metadata structure\n\nTime to learn: 30 minutes\n\n\n\n","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#prerequisites","position":7},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Imports"},"type":"lvl2","url":"/foundations/xarray/xwrf-xarray-intro#imports","position":8},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Imports"},"content":"\n\nSimmilar to numpy, np; pandas, pd; you may often encounter xarray imported within a shortened namespace as xr.\n\nfrom datetime import timedelta\n\nimport cmweather\nimport xarray as xr\nimport xwrf\nimport glob\n\nimport matplotlib.pyplot as plt\n\n","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#imports","position":9},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Introducing xwrf"},"type":"lvl2","url":"/foundations/xarray/xwrf-xarray-intro#introducing-xwrf","position":10},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Introducing xwrf"},"content":"xWRF is a package designed to make the post-processing of \n\nWRF output data more pythonic. It’s aim is to smooth the rough edges around the unique, non CF-compliant \n\nWRF output data format and make the data accessible to utilities like \n\ndask and the wider \n\nPangeo universe.\n\nIt is built as an \n\nAccessor on top of \n\nxarray, providing a very simple user interface.\n\n","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#introducing-xwrf","position":11},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl3":"Finding a Dataset","lvl2":"Introducing xwrf"},"type":"lvl3","url":"/foundations/xarray/xwrf-xarray-intro#finding-a-dataset","position":12},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl3":"Finding a Dataset","lvl2":"Introducing xwrf"},"content":"Our dataset of interest is a WRF dataset from the SAIL domain, near Gothic, Colorado, available as an ARM PI dataset - \n\nhttps://​iop​.archive​.arm​.gov​/arm​-iop​-file​/2021​/guc​/sail​/xu​-wrf​/README​.html.\n\nMore information on the dataset:These are the Weather Research and Forecasting (WRF) regional climate model simulations for supporting the analysis of temperature, precipitation, and other hydroclimate variables and evaluating SAIL data. The WRF model has three nested domains centered at the SAIL location (East River, Colorado) for the SAIL period from Oct 01, 2021 to Dec 31, 2022. We used the BSU subgrid-scale physics schemes, CFSR meteorological forcing datasets, and the topographic shading radiation schemes in our WRF simulation. Detailed information on the model configuration can be found at https://doi.org/10.5194/egusphere-2022-437\n\n","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#finding-a-dataset","position":13},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl3":"Examining the data","lvl2":"Introducing xwrf"},"type":"lvl3","url":"/foundations/xarray/xwrf-xarray-intro#examining-the-data","position":14},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl3":"Examining the data","lvl2":"Introducing xwrf"},"content":"When opening up a normal \n\nWRF output file with the simple \n\nxarray netcdf backend, one can see that it does not provide a lot of useful information.\n\nds = xr.open_dataset(\"../data/sail/wrf/wrfout_d03_2023-03-10_00_00_00\")\nds\n\n","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#examining-the-data","position":15},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl3":"Use .postprocess() to clean the dataset","lvl2":"Introducing xwrf"},"type":"lvl3","url":"/foundations/xarray/xwrf-xarray-intro#use-postprocess-to-clean-the-dataset","position":16},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl3":"Use .postprocess() to clean the dataset","lvl2":"Introducing xwrf"},"content":"While all variables are present, e.g. the information about the projection is still in the metadata and also for some fields, there are non-\n\nmetpy compliant units attributes.\n\nSo let’s try to use the standard xWRF.postprocess() function in order to make this information useable.\n\nds = xr.open_dataset(\"../data/sail/wrf/wrfout_d03_2023-03-10_00_00_00\").xwrf.postprocess()\nds\n\nAs you see, xWRF added some coordinate data, reassigned some dimensions and generally increased the amount of information available in the dataset.\n\n","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#use-postprocess-to-clean-the-dataset","position":17},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl3":"Plot the Data!","lvl2":"Introducing xwrf"},"type":"lvl3","url":"/foundations/xarray/xwrf-xarray-intro#plot-the-data","position":18},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl3":"Plot the Data!","lvl2":"Introducing xwrf"},"content":"Now that we have our data in an easier to analyze format, let’s plot one of the fields.\n\nds.SNOW.plot(x='XLONG',\n             y='XLAT',\n             cmap='Blues')\n\n","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#plot-the-data","position":19},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Investigate the change in SWE over time"},"type":"lvl2","url":"/foundations/xarray/xwrf-xarray-intro#investigate-the-change-in-swe-over-time","position":20},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Investigate the change in SWE over time"},"content":"\n\nfirst_ds = xr.open_dataset(\"../data/sail/wrf/wrfout_d03_2023-03-10_00_00_00\").xwrf.postprocess().squeeze()\nlast_ds = xr.open_dataset(\"../data/sail/wrf/wrfout_d03_2023-03-11_00_00_00\").xwrf.postprocess().squeeze()\n\n","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#investigate-the-change-in-swe-over-time","position":21},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl3":"Calculate the Change in SWE","lvl2":"Investigate the change in SWE over time"},"type":"lvl3","url":"/foundations/xarray/xwrf-xarray-intro#calculate-the-change-in-swe","position":22},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl3":"Calculate the Change in SWE","lvl2":"Investigate the change in SWE over time"},"content":"Here, we take the difference using Xarray!\n\ndifference = last_ds[\"SNOW\"] - first_ds[\"SNOW\"]\n\nlast_ds[\"SNOW\"]\n\ndifference.plot(x='XLONG',\n                y='XLAT',\n                cbar_kwargs={'label': \"Change in Snow Water Equivalent ($kgm^{-2}$)\"})\nplt.title(\"24 Hour Difference in \\n Snow Water Liquid Equivalent \\n 10 March to 11 March 2023\")\n\n","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#calculate-the-change-in-swe","position":23},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Challenge: Why is there more snow in some areas, and less in others?"},"type":"lvl2","url":"/foundations/xarray/xwrf-xarray-intro#challenge-why-is-there-more-snow-in-some-areas-and-less-in-others","position":24},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Challenge: Why is there more snow in some areas, and less in others?"},"content":"Investigate other fields in the datasets\n\nLook at other time steps - where are our precipitation fields?\n\nFind possible scientific explanations here!\n\nfiles = sorted(glob.glob(\"../data/sail/wrf/*\"))\nfiles\n\n\n\n","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#challenge-why-is-there-more-snow-in-some-areas-and-less-in-others","position":25},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Summary"},"type":"lvl2","url":"/foundations/xarray/xwrf-xarray-intro#summary","position":26},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Summary"},"content":"xwrf can be a helpful tool when working with WRF data in Python! In this tutorial, we investigated WRF data from the SAIL campaign, digging into the datasets and using visualization techniques to analyze our results.","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#summary","position":27},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl3":"What’s next?","lvl2":"Summary"},"type":"lvl3","url":"/foundations/xarray/xwrf-xarray-intro#whats-next","position":28},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl3":"What’s next?","lvl2":"Summary"},"content":"How do we scale up this analysis beyond a 24 hour run? Or higher resolution data? In future notebooks, we explore tools to help with increasing our ability to analyze high resolution datasets with xwrf.\n\n","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#whats-next","position":29},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Resources and references"},"type":"lvl2","url":"/foundations/xarray/xwrf-xarray-intro#resources-and-references","position":30},{"hierarchy":{"lvl1":"Introduction to xwrf","lvl2":"Resources and references"},"content":"This notebook was adapated from material in \n\nxwrf Documentation.\n\nThe dataset used here is an ARM PI dataset, courtesy of Zexuan Xu (\n\nzexuanxu@lbl.gov). If you use this dataset, please be sure to cite:\n\nXu (2023)\n\nMore information can be found in the related publication - \n\nXu et al. (2022)","type":"content","url":"/foundations/xarray/xwrf-xarray-intro#resources-and-references","position":31},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"type":"lvl1","url":"/notebooks/how-to-cite","position":0},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"content":"The material in this Project Pythia Cookbook is licensed for free and open consumption and reuse. All code is served under \n\nApache 2.0, while all non-code content is licensed under \n\nCreative Commons BY 4.0 (CC BY 4.0). Effectively, this means you are free to share and adapt this material so long as you give appropriate credit to the Cookbook authors and the Project Pythia community.\n\nThe source code for the book is \n\nreleased on GitHub and archived on Zenodo. This DOI will always resolve to the latest release of the book source:\n\n","type":"content","url":"/notebooks/how-to-cite","position":1},{"hierarchy":{"lvl1":"Summer School Projects"},"type":"lvl1","url":"/projects/readme","position":0},{"hierarchy":{"lvl1":"Summer School Projects"},"content":"ARM regularly holds open science summer schools, which offer students an opportunity to learn about open source tools, work with ARM data, and develop their own workflows, aiming to answer a set of scientific questions. Previous events are listed below, with this chapter including the fully reproducible workflows.","type":"content","url":"/projects/readme","position":1},{"hierarchy":{"lvl1":"Summer School Projects","lvl2":"2024 ARM Open Science Summer School"},"type":"lvl2","url":"/projects/readme#id-2024-arm-open-science-summer-school","position":2},{"hierarchy":{"lvl1":"Summer School Projects","lvl2":"2024 ARM Open Science Summer School"},"content":"Main Landing Page\n\nGithub Repository\n\nProject Cookbooks","type":"content","url":"/projects/readme#id-2024-arm-open-science-summer-school","position":3},{"hierarchy":{"lvl1":"Summer School Projects","lvl2":"2025 CAPE-k Student Workshop"},"type":"lvl2","url":"/projects/readme#id-2025-cape-k-student-workshop","position":4},{"hierarchy":{"lvl1":"Summer School Projects","lvl2":"2025 CAPE-k Student Workshop"},"content":"Main Landing Page\n\nGithub Repository\n\nProject Cookbooks","type":"content","url":"/projects/readme#id-2025-cape-k-student-workshop","position":5},{"hierarchy":{"lvl1":"Summer School Projects","lvl2":"2025 BNF Summer School"},"type":"lvl2","url":"/projects/readme#id-2025-bnf-summer-school","position":6},{"hierarchy":{"lvl1":"Summer School Projects","lvl2":"2025 BNF Summer School"},"content":"Main Landing Page\n\nGithub Repository\n\nProject Cookbooks","type":"content","url":"/projects/readme#id-2025-bnf-summer-school","position":7},{"hierarchy":{"lvl1":"Cloud Condensation Nuclei and Precipitation Analysis"},"type":"lvl1","url":"/projects/bnf-2025/acid/ccn-droplet-count","position":0},{"hierarchy":{"lvl1":"Cloud Condensation Nuclei and Precipitation Analysis"},"content":"\n\n","type":"content","url":"/projects/bnf-2025/acid/ccn-droplet-count","position":1},{"hierarchy":{"lvl1":"Cloud Condensation Nuclei and Precipitation Analysis"},"type":"lvl1","url":"/projects/bnf-2025/acid/ccn-droplet-count#cloud-condensation-nuclei-and-precipitation-analysis","position":2},{"hierarchy":{"lvl1":"Cloud Condensation Nuclei and Precipitation Analysis"},"content":"Example shows how to plot up CCN droplet count\nin a size distribution plot, and an interactive precipitation intensity visualization.\n\n","type":"content","url":"/projects/bnf-2025/acid/ccn-droplet-count#cloud-condensation-nuclei-and-precipitation-analysis","position":3},{"hierarchy":{"lvl1":"Cloud Condensation Nuclei and Precipitation Analysis","lvl2":"Imports"},"type":"lvl2","url":"/projects/bnf-2025/acid/ccn-droplet-count#imports","position":4},{"hierarchy":{"lvl1":"Cloud Condensation Nuclei and Precipitation Analysis","lvl2":"Imports"},"content":"\n\nimport numpy as np\nimport act\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\n\n","type":"content","url":"/projects/bnf-2025/acid/ccn-droplet-count#imports","position":5},{"hierarchy":{"lvl1":"Cloud Condensation Nuclei and Precipitation Analysis","lvl2":"Analyze CCN Data for BNF from the Data Archive"},"type":"lvl2","url":"/projects/bnf-2025/acid/ccn-droplet-count#analyze-ccn-data-for-bnf-from-the-data-archive","position":6},{"hierarchy":{"lvl1":"Cloud Condensation Nuclei and Precipitation Analysis","lvl2":"Analyze CCN Data for BNF from the Data Archive"},"content":"\n\nusername = 'mgrover4'\ntoken = '176e1559b67be630'\ndatastream = 'bnfaosccn2colaspectraM1.b1'\nstartdate = '2025-05-08'\nenddate = '2025-05-11T23:59:59'\n\n# Download and read the data\nresult_ccn = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nds_ccn = act.io.read_arm_netcdf(result_ccn)\nds_ccn.clean.cleanup()\n\n","type":"content","url":"/projects/bnf-2025/acid/ccn-droplet-count#analyze-ccn-data-for-bnf-from-the-data-archive","position":7},{"hierarchy":{"lvl1":"Cloud Condensation Nuclei and Precipitation Analysis","lvl3":"Visualize the CCN Data","lvl2":"Analyze CCN Data for BNF from the Data Archive"},"type":"lvl3","url":"/projects/bnf-2025/acid/ccn-droplet-count#visualize-the-ccn-data","position":8},{"hierarchy":{"lvl1":"Cloud Condensation Nuclei and Precipitation Analysis","lvl3":"Visualize the CCN Data","lvl2":"Analyze CCN Data for BNF from the Data Archive"},"content":"\n\nif 'lat' not in ds_ccn.coords:\n    ds_ccn = ds_ccn.set_coords(['lat', 'lon'])\n\nprint(\"Variables:\", list(ds_ccn.data_vars))\n\nccn_var = 'concentration'\n\n# Plot\ndisp = act.plotting.TimeSeriesDisplay(ds_ccn, figsize=(12, 8))\ndisp.plot(ccn_var, label='CCN Concentration [#/cm³]')\ndisp.axes[0].set_title('Cloud Condensation Nuclei (CCN) Number Concentration')\ndisp.axes[0].set_ylabel('Supersaturation (%)')\ndisp.axes[0].set_xlabel('Time (UTC)')\ndisp.day_night_background()\ndisp.axes[0].legend()\n\nplt.show()\n\n#Get supersaturation levels and time\nsupersat = ds_ccn['supersaturation_setpoint'].values\ntimes = ds_ccn['time'].values\n\n#Create the plot\nfig, ax = plt.subplots(figsize=(12, 5))\ncolors = plt.cm.viridis(np.linspace(0, 1, len(supersat)))\n\n#Plot one trace per supersaturation level\nfor i, ss in enumerate(supersat):\n    ccn = ds_ccn['concentration'].sel(supersaturation_setpoint=ss)\n    valid = ~ccn.isnull()\n    ax.scatter(times[valid], ccn.values[valid], s=10, color=colors[i], label=f'SS = {ss:.2f}')\n\n#Plot makeup\nax.set_title('CCN Number Concentration vs Time at Different Supersaturations')\nax.set_xlabel('Time (UTC)')\nax.set_ylabel('CCN Concentration [#/cm³]')\nax.set_yscale('log')\nax.legend(title='Supersaturation (%)')\nax.grid(True)\nplt.tight_layout()\nplt.show()\n\n","type":"content","url":"/projects/bnf-2025/acid/ccn-droplet-count#visualize-the-ccn-data","position":9},{"hierarchy":{"lvl1":"Precipitation Analysis with the Pluvio"},"type":"lvl1","url":"/projects/bnf-2025/acid/ccn-droplet-count#precipitation-analysis-with-the-pluvio","position":10},{"hierarchy":{"lvl1":"Precipitation Analysis with the Pluvio"},"content":"\n\n# Set the datastream and start/enddates\ndatastream = 'bnfwbpluvio2M1.a1'\nstartdate = '2025-05-08'\nenddate = '2025-05-11T23:59:59'\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult_rain = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\n\n# Let's read in the data using ACT and check out the data\nds_rain = act.io.read_arm_netcdf(result_rain)\n\n# Apply quality control checks\nds_rain.clean.cleanup()\n\n#printing output label\nprint(\"Available rain-related variables:\")\n#printing list of variables\nprint(list(ds_rain.data_vars))\n#saving rain variables\nrain_rate_var = 'intensity_rt'\n#giving a shortcut\nds = ds_rain\n\n","type":"content","url":"/projects/bnf-2025/acid/ccn-droplet-count#precipitation-analysis-with-the-pluvio","position":11},{"hierarchy":{"lvl1":"Precipitation Analysis with the Pluvio","lvl3":"Interactive Visualizion of the Pluvio Data"},"type":"lvl3","url":"/projects/bnf-2025/acid/ccn-droplet-count#interactive-visualizion-of-the-pluvio-data","position":12},{"hierarchy":{"lvl1":"Precipitation Analysis with the Pluvio","lvl3":"Interactive Visualizion of the Pluvio Data"},"content":"\n\n#store data\nrain_rate_var = 'intensity_rt'\ndf_rain = ds_rain[rain_rate_var].to_dataframe().dropna()\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=df_rain.index,\n    y=df_rain[rain_rate_var],\n    mode='lines+markers',\n    name='Rain Rate [mm/hr]',\n    line=dict(color='blue')\n))\n\nfig.update_layout(\n    title='Rain Rate (Pluvio2)',\n    xaxis_title='Time (UTC)',\n    yaxis_title='Rain Rate [mm/hr]',\n    hovermode='x unified',\n    template='plotly_white',\n    height=500,\n)\n\nfig.show()","type":"content","url":"/projects/bnf-2025/acid/ccn-droplet-count#interactive-visualizion-of-the-pluvio-data","position":13},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF"},"type":"lvl1","url":"/projects/bnf-2025/acid/optical-properties","position":0},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF"},"content":"\n\n","type":"content","url":"/projects/bnf-2025/acid/optical-properties","position":1},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF"},"type":"lvl1","url":"/projects/bnf-2025/acid/optical-properties#aerosol-optical-properties-at-bnf","position":2},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF"},"content":"\n\n","type":"content","url":"/projects/bnf-2025/acid/optical-properties#aerosol-optical-properties-at-bnf","position":3},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF","lvl2":"Imports"},"type":"lvl2","url":"/projects/bnf-2025/acid/optical-properties#imports","position":4},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF","lvl2":"Imports"},"content":"\n\nimport act\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\n\n","type":"content","url":"/projects/bnf-2025/acid/optical-properties#imports","position":5},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF","lvl2":"Access Aerosol Property Data at BNF"},"type":"lvl2","url":"/projects/bnf-2025/acid/optical-properties#access-aerosol-property-data-at-bnf","position":6},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF","lvl2":"Access Aerosol Property Data at BNF"},"content":"Use the ACT library to search and download data at BNF\n\n# Set your username and token\nusername = 'mgrover4'\ntoken = '176e1559b67be630'\n\n# Set the datastream and start/enddates\ndatastream = 'bnfaoscaps3wM1.b1'\nstartdate = '2025-05-08'\nenddate = '2025-05-11T23:59:59'\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult_caps = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\n\ndatastream = 'bnfaossmpsM1.b1'\nresult_smps = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\n\ndatastream = 'bnfaosnephdryM1.b1'\nresult_neph = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\n\n# Set the datastream and start/enddates\ndatastream = 'bnfmetM1.b1'\nresult_met = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\n\ndatastream = 'bnfaoppsap1flynn1mM1.c1'\nresult_psap = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\n\ndatastream = 'bnfaossp2xrM1.b1'\nresult_sp2 = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\n\n\n","type":"content","url":"/projects/bnf-2025/acid/optical-properties#access-aerosol-property-data-at-bnf","position":7},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF","lvl3":"Load the Data into ACT and Apply Quality Control","lvl2":"Access Aerosol Property Data at BNF"},"type":"lvl3","url":"/projects/bnf-2025/acid/optical-properties#load-the-data-into-act-and-apply-quality-control","position":8},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF","lvl3":"Load the Data into ACT and Apply Quality Control","lvl2":"Access Aerosol Property Data at BNF"},"content":"Let’s read in the data using ACT and check out the data\n\nds_caps_org = act.io.read_arm_netcdf(result_caps)\nds_smps_org = act.io.read_arm_netcdf(result_smps)\nds_neph_org = act.io.read_arm_netcdf(result_neph)\nds_sp2_org = act.io.read_arm_netcdf(result_sp2)\nds_psap_org = act.io.read_arm_netcdf(result_psap)\n\n","type":"content","url":"/projects/bnf-2025/acid/optical-properties#load-the-data-into-act-and-apply-quality-control","position":9},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF","lvl4":"Visualize the Data without Quality Control","lvl3":"Load the Data into ACT and Apply Quality Control","lvl2":"Access Aerosol Property Data at BNF"},"type":"lvl4","url":"/projects/bnf-2025/acid/optical-properties#visualize-the-data-without-quality-control","position":10},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF","lvl4":"Visualize the Data without Quality Control","lvl3":"Load the Data into ACT and Apply Quality Control","lvl2":"Access Aerosol Property Data at BNF"},"content":"\n\ndisplay = act.plotting.TimeSeriesDisplay({'CAPS': ds_caps_org, 'NEPH':ds_neph_org,'SMPS': ds_smps_org }, figsize=(15, 10), subplot_shape=(3,))\n\n\n\n# Plot up the variable in the first plot\n# Need to specify the dsname so it knows which dataset\n# to use for this data.  This is helpful when datasets \n# have similar variable names\ndisplay.plot('Bext_R', dsname='CAPS', subplot_index=(0,),color='red',marker='o', linestyle='none',alpha=0.3)\ndisplay.plot('Bext_G', dsname='CAPS', subplot_index=(0,),color='green',marker='o', linestyle='none',alpha=0.3)\ndisplay.plot('Bext_B', dsname='CAPS', subplot_index=(0,),color='blue',marker='o', linestyle='none',alpha=0.3)\n\n\ndisplay.plot('Bs_R_Dry_Neph3W', dsname='NEPH', subplot_index=(1,),color='red',marker='o', linestyle='none',alpha=0.3)\ndisplay.plot('Bs_G_Dry_Neph3W', dsname='NEPH', subplot_index=(1,),color='green',marker='o', linestyle='none',alpha=0.3)\ndisplay.plot('Bs_B_Dry_Neph3W', dsname='NEPH', subplot_index=(1,),color='blue',marker='o', linestyle='none',alpha=0.3)\n\n# Plot up the MET btemperature and precipitation\ndisplay.plot('dN_dlogDp', dsname='SMPS', subplot_index=(2,))\ndisplay.axes[2,].set_ylim(0, 300)\n\nWe can see that there’s some missing data in the plot above so let’s take a look at the embedded QC!\n\nFirst, for many of the ACT QC features, we need to get the dataset more to CF standard and that involves cleaning up some of the attributes and ways that ARM has historically handled QC\n\nds_caps_org.clean.cleanup()\nds_smps_org.clean.cleanup()\nds_neph_org.clean.cleanup()\nds_sp2_org.clean.cleanup()\nds_psap_org.clean.cleanup()\n\nds_caps_org = ds_caps_org.load().where(ds_caps_org.impactor_state == 1, drop=True)\nds_neph_org = ds_neph_org.load().where(ds_neph_org.impactor_state == 1, drop=True)\nds_psap_org = ds_psap_org.load().where(ds_psap_org.impactor_state == 1, drop=True)\n\nds_psap_org\n\n","type":"content","url":"/projects/bnf-2025/acid/optical-properties#visualize-the-data-without-quality-control","position":11},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF","lvl3":"Resample to Equivalent Hourly Frequency","lvl2":"Access Aerosol Property Data at BNF"},"type":"lvl3","url":"/projects/bnf-2025/acid/optical-properties#resample-to-equivalent-hourly-frequency","position":12},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF","lvl3":"Resample to Equivalent Hourly Frequency","lvl2":"Access Aerosol Property Data at BNF"},"content":"And plot again!\n\nCreate a plotting display object with 2 plots.\n\nNote we have to create a dictionary of datasets to pass in.\n\nds_caps=ds_caps_org.resample(time='60min').mean()\nds_neph=ds_neph_org.resample(time='60min').mean()\nds_psap=ds_psap_org.resample(time='60min').mean()\nds_sp2=ds_sp2_org.resample(time='60min').mean()\nds_smps=ds_smps_org.resample(time=\"60min\").mean()\n\ndisplay = act.plotting.TimeSeriesDisplay({'CAPS': ds_caps, 'NEPH':ds_neph,'SMPS': ds_smps }, figsize=(15, 10), subplot_shape=(3,))\n\n\n\n# Plot up the variable in the first plot\n# Need to specify the dsname so it knows which dataset\n# to use for this data.  This is helpful when datasets \n# have similar variable names\ndisplay.plot('Bext_R', dsname='CAPS', subplot_index=(0,),color='red',marker='o', linestyle='none',alpha=0.3)\ndisplay.plot('Bext_G', dsname='CAPS', subplot_index=(0,),color='green',marker='o', linestyle='none',alpha=0.3)\ndisplay.plot('Bext_B', dsname='CAPS', subplot_index=(0,),color='blue',marker='o', linestyle='none',alpha=0.3)\n\n\ndisplay.plot('Bs_R_Dry_Neph3W', dsname='NEPH', subplot_index=(1,),color='red',marker='o', linestyle='none',alpha=0.3)\ndisplay.plot('Bs_G_Dry_Neph3W', dsname='NEPH', subplot_index=(1,),color='green',marker='o', linestyle='none',alpha=0.3)\ndisplay.plot('Bs_B_Dry_Neph3W', dsname='NEPH', subplot_index=(1,),color='blue',marker='o', linestyle='none',alpha=0.3)\n\n# Plot up the MET btemperature and precipitation\ndisplay.plot('dN_dlogDp', dsname='SMPS', subplot_index=(2,))\ndisplay.axes[2,].set_ylim(0, 300)\n\n","type":"content","url":"/projects/bnf-2025/acid/optical-properties#resample-to-equivalent-hourly-frequency","position":13},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF","lvl2":"Create a Scatter Plot Comparison of Values"},"type":"lvl2","url":"/projects/bnf-2025/acid/optical-properties#create-a-scatter-plot-comparison-of-values","position":14},{"hierarchy":{"lvl1":"Aerosol Optical Properties at BNF","lvl2":"Create a Scatter Plot Comparison of Values"},"content":"\n\ndfNeph=ds_neph.to_dataframe()\ndfCaps=ds_caps.to_dataframe()\ndfPsap=ds_psap.to_dataframe()\ndfSp2=ds_sp2.to_dataframe()\n\ndf_merged = pd.merge_asof(dfCaps, dfPsap,on='time', direction='nearest')\n\ndf_merged['SSA B']=df_merged['Bs_B_Dry_Neph3W']/df_merged['Bext_B']\ndf_merged['SSA R']=df_merged['Bs_R_Dry_Neph3W']/df_merged['Bext_R']\ndf_merged['SSA G']=df_merged['Bs_G_Dry_Neph3W']/df_merged['Bext_G']\n\ndf_merged['alphaRB']=-(np.log (df_merged['Bs_R_Dry_Neph3W']/df_merged['Bs_B_Dry_Neph3W'])/np.log (700/450))\ndf_merged['alphaBG']=-(np.log (df_merged['Bs_B_Dry_Neph3W']/df_merged['Bs_G_Dry_Neph3W'])/np.log (450/550))\ndf_merged['alphaGR']=-(np.log (df_merged['Bs_G_Dry_Neph3W']/df_merged['Bs_R_Dry_Neph3W'])/np.log (550/700))\n\ndf_merged['Abs_B']=df_merged['Bext_B']-df_merged['Bs_B_Dry_Neph3W']\ndf_merged['Abs_R']=df_merged['Bext_R']-df_merged['Bs_R_Dry_Neph3W']\ndf_merged['Abs_G']=df_merged['Bext_G']-df_merged['Bs_G_Dry_Neph3W']\n\ndf_merged['AAE_RB']=-(np.log (df_merged['Abs_R']/df_merged['Abs_B'])/np.log (700/450))\ndf_merged['AAE_BG']=-(np.log (df_merged['Abs_B']/df_merged['Abs_G'])/np.log (450/550))\ndf_merged['AAE_GR']=-(np.log (df_merged['Abs_G']/df_merged['Abs_R'])/np.log (550/700))\n\ndf_merged['Avg_SAE']=(df_merged['alphaRB']+df_merged['alphaBG']+df_merged['alphaGR'])/3\ndf_merged['Avg_SSA']=(df_merged['SSA B']+df_merged['SSA R']+df_merged['SSA G'])/3\n\ndisplay = act.plotting.TimeSeriesDisplay({'CAPS': ds_caps, 'NEPH':ds_neph,'SMPS': ds_smps }, figsize=(15, 25), subplot_shape=(6,))\n\n\n\n# Plot up the variable in the first plot\n# Need to specify the dsname so it knows which dataset\n# to use for this data.  This is helpful when datasets \n# have similar variable names\ndisplay.plot('Bext_R', dsname='CAPS', subplot_index=(0,),color='red',marker='o', linestyle='none',alpha=1)\ndisplay.plot('Bext_G', dsname='CAPS', subplot_index=(0,),color='green',marker='o', linestyle='none',alpha=1)\ndisplay.plot('Bext_B', dsname='CAPS', subplot_index=(0,),color='blue',marker='o', linestyle='none',alpha=1)\n\ndisplay.plot('Bs_R_Dry_Neph3W', dsname='NEPH', subplot_index=(1,),color='red',marker='o', linestyle='none',alpha=1)\ndisplay.plot('Bs_G_Dry_Neph3W', dsname='NEPH', subplot_index=(1,),color='green',marker='o', linestyle='none',alpha=1)\ndisplay.plot('Bs_B_Dry_Neph3W', dsname='NEPH', subplot_index=(1,),color='blue',marker='o', linestyle='none',alpha=1)\n\n#display.axes[2,].plot(df_merged['time'],df_merged['SSA R'], color='red',marker='o', linestyle='none',alpha=0.3)\n#display.axes[2,].plot(df_merged['time'],df_merged['SSA G'],color='green',marker='o', linestyle='none',alpha=0.3)\n#display.axes[2,].plot(df_merged['time'],df_merged['SSA B'],color='blue',marker='o', linestyle='none',alpha=0.3)\n\n#df_merged.plot(x='time',y='SSA R',ax=display.axes[2,],color='red',style='o')\n##df_merged.plot(x='time',y='SSA B',ax=display.axes[2,],color='blue',style='o')\n#df_merged.plot(x='time',y='SSA G',ax=display.axes[2,],color='green',style='o')\n\n\n#display.axes[2,].set_ylabel('SSA')\n#display.axes[2,].set_ylim(0.25, 1.5)\n\n\ndf_merged.plot(x='time',y='AAE_BR',ax=display.axes[2,],color='black',style='o')\n\n\ndisplay.axes[2,].set_ylabel('AAE')\ntwinx=display.axes[2,].twinx()\ntwinx.set_ylabel('SAE')\ndf_merged.plot(x='time',y='AE_BR',ax=twinx,color='gold',style='o')\n#twinx.set_ylim(1.5, 3)\n\n\n\n#df_merged.plot(x='time',y='AAE_RB',ax=display.axes[4,],color='red',style='o')\n##df_merged.plot(x='time',y='AAE_BG',ax=display.axes[4,],color='blue',style='o')\n#df_merged.plot(x='time',y='AAE_GR',ax=display.axes[4,],color='green',style='o')\n#display.axes[4,].set_ylabel('AAE')\n#display.axes[4,].set_ylim(0, 2)\n\ndf_merged.plot(x='time',y='ssa_B_Virkkula',ax=display.axes[3,],color='green',style='-o')\ndisplay.axes[3,].set_ylabel('SSA')\n\n#display.axes[3,].set_ylim(0.6, 1)\n#twin_ax.set_ylim(0, 1)\ndfSp2 = pd.DataFrame({'time': ds_sp2['time'].values, 'rBC_particle_conc': ds_sp2['rBC_particle_conc'].values, 'scattering_particle_conc': ds_sp2['scattering_particle_conc'].values})\ndfSp2['rBC/Scattering']=dfSp2['rBC_particle_conc']/dfSp2['scattering_particle_conc']\n\n\ndfSp2.plot(x='time',y='rBC/Scattering', color='black', ax=display.axes[4,])\ndisplay.axes[4,].set_ylabel('BC/Scattering')\n\n\ndisplay.plot('dN_dlogDp', dsname='SMPS', subplot_index=(5,))\ndisplay.axes[5,].set_ylim(0, 300)\ndisplay.axes[5,].set_ylabel('Mobility diameter (nm) dN/dlogDp')","type":"content","url":"/projects/bnf-2025/acid/optical-properties#create-a-scatter-plot-comparison-of-values","position":15},{"hierarchy":{"lvl1":"Cold Pool Analysis from BNF XSACR"},"type":"lvl1","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-radar-analysis","position":0},{"hierarchy":{"lvl1":"Cold Pool Analysis from BNF XSACR"},"content":"","type":"content","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-radar-analysis","position":1},{"hierarchy":{"lvl1":"Cold Pool Analysis from BNF XSACR","lvl2":"Imports"},"type":"lvl2","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-radar-analysis#imports","position":2},{"hierarchy":{"lvl1":"Cold Pool Analysis from BNF XSACR","lvl2":"Imports"},"content":"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pyart\nfrom netCDF4 import Dataset\nimport xarray as xr\nimport glob\nimport datetime\nimport pandas as pd\nimport matplotlib.dates as mdates\nimport os\nimport math\nimport calendar\n\n\n","type":"content","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-radar-analysis#imports","position":3},{"hierarchy":{"lvl1":"Cold Pool Analysis from BNF XSACR","lvl2":"Plot a Column Vertical Profile (CVP)"},"type":"lvl2","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-radar-analysis#plot-a-column-vertical-profile-cvp","position":4},{"hierarchy":{"lvl1":"Cold Pool Analysis from BNF XSACR","lvl2":"Plot a Column Vertical Profile (CVP)"},"content":"\n\ndef find_nearest(array, value):\n    array = np.asarray(array)\n    idx = (np.abs(array - value)).argmin()\n    return idx, array[idx]\n\n\ndef calculate_elevation_angle_array(height: np.ndarray, range_: np.ndarray) -> np.ndarray:\n    \"\"\"Returns an array of elevation angles in degrees.\"\"\"\n    return np.degrees(np.arctan2(height, range_))\n\ndef plot_qvp_5variables(qvp_dbzs,qvp_vels,qvp_wths,qvp_zdrs,qvp_rhos,dtimes, hgt,el, case,htop,qvp_dir):\n\n\n    \n    \n    # # Ensure dtimes is np.array of datetime\n    # if isinstance(dtimes, list):\n    #     dtimes = np.array(dtimes)\n    \n    # # Fix dimensions for pcolormesh\n    # if dtimes.ndim == 1:\n    #     dtimes = np.tile(dtimes, (new_dbzs.shape[0], 1))\n    \n    # # Check datetime format\n    # assert np.issubdtype(dtimes.dtype, np.datetime64) or isinstance(dtimes[0, 0], datetime.datetime)\n    \n    # # Ensure start_time and end_time are datetime\n    # if isinstance(start_time, str):\n    #     start_time = datetime.datetime.fromisoformat(start_time)\n    # if isinstance(end_time, str):\n    #     end_time = datetime.datetime.fromisoformat(end_time)\n    \n    # Transpose and convert to arrays\n    new_dbzs = np.array(qvp_dbzs).T\n    new_zdrs = np.array(qvp_zdrs).T\n    new_rhos = np.array(qvp_rhos).T\n    new_vels = np.array(qvp_vels).T\n    new_wths = np.array(qvp_wths).T\n    \n    # Apply RhoHV mask\n    mask = new_rhos < 0.2\n    new_dbzs[mask] = np.nan\n    new_zdrs[mask] = np.nan\n    new_rhos[mask] = np.nan\n    new_vels[mask] = np.nan\n    new_wths[mask] = np.nan\n    \n    # Setup plot\n    ytop = htop\n    fig, axes = plt.subplots(5, 1, sharex=True, figsize=(8, 15))\n    fig.subplots_adjust(hspace=0.3)\n    \n    # Plot Reflectivity\n    #pcm = axes[0].pcolormesh(dtimes, hgt / 1e3, new_dbzs, vmin=-40, vmax=40, cmap='HomeyerRainbow')\n    pcm = axes[0].pcolormesh(dtimes, hgt / 1e3, new_dbzs, vmin=-40, vmax=40, cmap='ChaseSpectral')\n    fig.colorbar(pcm, ax=axes[0], label='[dBZ]')\n    axes[0].set_ylim(0, ytop)\n    axes[0].set_title('Reflectivity')\n    axes[0].set_ylabel('height [km]')\n    \n    # Plot Velocity\n    pcm = axes[1].pcolormesh(dtimes, hgt / 1e3, new_vels, vmin=-5, vmax=5, cmap='Spectral_r')\n    fig.colorbar(pcm, ax=axes[1], label='[m/s]')\n    axes[1].set_ylim(0, ytop)\n    axes[1].set_title('Vd')\n    axes[1].set_ylabel('height [km]')\n    \n    # Plot Width\n    pcm = axes[2].pcolormesh(dtimes, hgt / 1e3, new_wths, vmin=0, vmax=3, cmap='Spectral_r')\n    fig.colorbar(pcm, ax=axes[2], label='[m/s]')\n    axes[2].set_ylim(0, ytop)\n    axes[2].set_title('Width')\n    axes[2].set_ylabel('height [km]')\n    \n    # Plot ZDR\n    #pcm = axes[3].pcolormesh(dtimes, hgt / 1e3, new_zdrs, vmin=-2, vmax=4, cmap='Spectral_r')\n    pcm = axes[3].pcolormesh(dtimes, hgt / 1e3, new_zdrs, vmin=-2, vmax=4, cmap='ChaseSpectral')\n    fig.colorbar(pcm, ax=axes[3], label='[dB]')\n    axes[3].set_ylim(0, ytop)\n    axes[3].set_title('ZDR')\n    axes[3].set_ylabel('height [km]')\n    \n    # Plot RhoHV\n    pcm = axes[4].pcolormesh(dtimes, hgt / 1e3, new_rhos, vmin=0, vmax=1, cmap='Spectral_r')\n    fig.colorbar(pcm, ax=axes[4])\n    axes[4].set_ylim(0, ytop)\n    axes[4].set_title('RhoHV')\n    axes[4].set_ylabel('height [km]')\n    axes[4].set_xlabel('Time [UTC] on ' + str(case))\n    # axes[4].set_xlim([start_time, end_time])\n    axes[4].xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))\n    \n    # axes[4].set_xlim([dtimes.min(), dtimes.max()])\n    # axes[4].xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))\n    # Add main title\n    plt.suptitle(f'BNF XSACR QVPs at {el} deg for {case}', y=0.95, fontsize=15)\n    \n    # Optional save\n     \n    #save_gif = qvp_dir + f'bnf_xsacr_qvp_{el}deg_{case}.png'\n    #save_gif = qvp_dir + f'bnf_xsacr_qvp_{el}deg_{case}htop_{htop}.png'\n    #plt.savefig(save_gif , dpi=400, bbox_inches=\"tight\")\n    plt.show()\n\n\n \nqvp_dir =  '/data/home/mdeng/data/bnf/qvp/xsacr/' \n#os.makedirs(qvp_dir, exist_ok=True)\n\n#dir = '/data/datastream/bnf/bnfxsacrcfrS4.a1/'\n#afile =  dir + 'bnfxsacrcfrS4.a1.20250514.225456.nc'\n\ndir = \"data/project/ARM_Summer_School_2025/radar/xsacr/*\" \n#afile =  dir + 'bnfxsacrcfrS4.a1.202505.225456.nc'\n\n\n#el = 9\nel = 16\n\n#azimuth range for a CVP\naz1 = 200\naz2 = 240\n\nyr = \"2025\"\nmonth = '05'\nday = '10'\ndate_join = f\"{yr}-{month}-{day}\"\ncase = yr + month + day\n\nfiles = sorted(glob.glob('/data/project/ARM_Summer_School_2025/radar/xsacr/bnfxsacrcfrS4.a1.'+case+'*'))\n#files = sorted(glob.glob('/data/datastream/bnf/bnfkasacrcfrS4.a1/bnfkasacrcfrS4.a1.'+case+'*'))\n\nnfiles = len(files)\n\nqvp_dbzs = []\nqvp_zdrs = []\nqvp_rhos = []\nqvp_vels = []\nqvp_wths = []\ndtimes = []\n\n\n\nfor file in files:\n    rad = pyart.io.read(file)\n    #print(file)\n\n    \n    if rad.scan_type == 'ppi':\n       \n\n        #find azimuths for XSACR file\n        azmth = rad.azimuth['data']\n        \n        #Make this into the same shape as our radar field data\n        azmth_square = np.repeat(np.expand_dims(azmth, 1), len(rad.range['data']), axis=1)\n        rad.add_field_like('reflectivity', 'azsq', azmth_square)\n \n        #Make a gate filter\n        mygf = gatefilter = pyart.correct.GateFilter(rad)\n        \n        #filter on aziumth, az1 to az2 degrees\n        mygf.exclude_outside('azsq', az1,az2) \n\n\n        \n        #qvp = pyart.retrieve.quasi_vertical_profile(rad, desired_angle=el)\n        qvp = pyart.retrieve.quasi_vertical_profile(rad, desired_angle=el, gatefilter= mygf)\n        rng = qvp['range']\n        hgt = qvp['height']\n\n        angle = calculate_elevation_angle_array(hgt, rng)\n        angle_mean = np.mean(angle)\n        d_angle  = np.abs(angle_mean - el)\n        if  d_angle  < 1:\n          \n            qdbz = qvp['reflectivity']\n            #qdbz = qvp['attenuation_corrected_reflectivity_h'] # for csapr\n            qvel = qvp['mean_doppler_velocity']\n            qwth = qvp['spectral_width']\n            \n            qzdr = qvp['differential_reflectivity']\n            qrho = qvp['copol_correlation_coeff']\n\n            rng0 = qvp['range']\n            hgt0 = qvp['height']\n\n        \n            qvp_dbzs.append(qdbz)\n            qvp_zdrs.append(qzdr)\n            qvp_rhos.append(qrho)\n            qvp_vels.append(qvel)\n            qvp_wths.append(qwth)\n    \n            #date = os.path.basename(files[i])[18:-3]\n            date = os.path.basename(file)[18:-3]\n            dto = datetime.datetime.strptime(date, '%Y%m%d.%H%M%S')\n            dtimes.append(dto)\n            \n            #print ('done with ' + file)\n\n\nrng_corr = rng*np.tan(np.deg2rad(el))\n# Define the time limits \nstart_time = np.datetime64(date_join+\"T00:00:00\")\nend_time = np.datetime64(date_join+\"T18:59:59\")\nhtop = 10\nplot_qvp_5variables(qvp_dbzs,qvp_vels,qvp_wths,qvp_zdrs,qvp_rhos,dtimes, hgt0,el, case,htop, qvp_dir)\nhtop = 2\nplot_qvp_5variables(qvp_dbzs,qvp_vels,qvp_wths,qvp_zdrs,qvp_rhos,dtimes, hgt0,el, case,htop, qvp_dir)\n\n\n","type":"content","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-radar-analysis#plot-a-column-vertical-profile-cvp","position":5},{"hierarchy":{"lvl1":"Coldpool and Downdraft Analysis"},"type":"lvl1","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-time-series","position":0},{"hierarchy":{"lvl1":"Coldpool and Downdraft Analysis"},"content":"import act\nimport pyart\nimport metpy\nfrom metpy.units import units\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nimport glob\n\n","type":"content","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-time-series","position":1},{"hierarchy":{"lvl1":"Coldpool and Downdraft Analysis","lvl2":"May 20 Event"},"type":"lvl2","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-time-series#may-20-event","position":2},{"hierarchy":{"lvl1":"Coldpool and Downdraft Analysis","lvl2":"May 20 Event"},"content":"\n\n# this is pulling individual May 20 C-SAPR2 radar data\ncsacr = \"/data/project/ARM_Summer_School_2025/bnf/bnfcsapr2cfrS3.a1/bnfcsapr2cfrS3.a1.20250520.233012.nc\"\nds_csacr = xr.open_dataset(csacr)\nds_csacr\n\nbelow is radiosonde data, but I’m not sure I need it anymore\n\n# # pull in met data using ACT\n# # Set your username and token here!\n# username = 'abchui'\n# token = '3279f3ac6800743d'\n\n# # Set the datastream and start/enddates\n# datastream = 'bnfsondewnpnM1.b1'\n# startdate = '2025-05-20T23:00:00'\n# enddate = '2025-05-20T23:59:59'\n\n# # Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# # for ARM's instrument experts and cite their data if you use it in a publication\n# result_sonde = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\n\n# sonde = pyart.io.read_arm_sonde(\"/data/project/ARM_Summer_School_2025/bnf/bnfsondewnpnM1.b1/bnfsondewnpnM1.b1.20250520.233000.cdf\")\n\npull MET data and then MAWS data for the dewpoint temperature (MET doesn’t have dewpoint) in order to calculate theta-e using metpy\n\n# pull in met data using ACT\n# Set your username and token here!\nusername = 'abchui'\ntoken = '3279f3ac6800743d'\n\n# Set the datastream and start/enddates\ndatastream = 'bnfmetM1.b1'\nstartdate = '2025-05-20'\nenddate = '2025-05-21T23:59:59' #notice can give date and time or leave it blank (like with start date)\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult_met = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nds_met = act.io.read_arm_netcdf(result_met)\nds_met\n\ncalculate theta-e, a good indicator for a cold pool\n\n# thetae = metpy.calc.equivalent_potential_temperature(ds_met.atmos_pressure, ds_met.temp_mean, ds_met.dewpoint)\n\n# # Create a plotting display object with 2 plots - do I want \n# display = act.plotting.TimeSeriesDisplay(ds_met, figsize=(15, 10), subplot_shape=(2,))\n\n# # Plot up the MET btemperature and precipitation\n# display.plot('temp_mean', subplot_index=(1,))\n# ax2 = display.axes[1].twinx() #copies the x axis onto both plots\n# ax2.plot(ds_met.time, ds_met.tbrg_precip_total, color='orange')\n\n# # Plot up a day/night background\n# display.day_night_background(subplot_index=(1,))\n\n# plt.show()\n\n\n\n","type":"content","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-time-series#may-20-event","position":3},{"hierarchy":{"lvl1":"Coldpool and Downdraft Analysis","lvl2":"March 15"},"type":"lvl2","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-time-series#march-15","position":4},{"hierarchy":{"lvl1":"Coldpool and Downdraft Analysis","lvl2":"March 15"},"content":"\n\n# C-SACR data\ncsacr = sorted(glob.glob(\"/data/project/ARM_Summer_School_2025/bnf/bnfcsapr2cfrS3.a1/bnfcsapr2cfrS3.a1.20250315.233012.nc\"))\n\n","type":"content","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-time-series#march-15","position":5},{"hierarchy":{"lvl1":"Coldpool and Downdraft Analysis","lvl2":"May 1"},"type":"lvl2","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-time-series#may-1","position":6},{"hierarchy":{"lvl1":"Coldpool and Downdraft Analysis","lvl2":"May 1"},"content":"\n\npull kazr2 general mode data. Can use ACT for this because KAZR (RHI type) radar is not super huge file. The cone type ones (like SACR) are very large files and so would prefer to just pull individual files for those.\n\n# Set your username and token here!\nusername = 'abchui'\ntoken = '3279f3ac6800743d'\n\n# Set the datastream and start/enddates\ndatastream = 'bnfkazr2cfrgeM1.a1'\nstartdate = '2025-05-01'\nenddate = '2025-05-01T23:59:59' #notice can give date and time or leave it blank (like with start date)\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult_kazr2 = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nds_kazr2 = act.io.read_arm_netcdf(result_kazr2)\n\npull MET data and then MAWS data for the dewpoint temperature (MET doesn’t have dewpoint) in order to calculate theta-e using metpy\n\n# pull in met data using ACT\n# Set your username and token here!\nusername = 'abchui'\ntoken = '3279f3ac6800743d'\n\n# Set the datastream and start/enddates\ndatastream = 'bnfmetM1.b1'\nstartdate = '2025-05-01'\nenddate = '2025-05-01T23:59:59' #notice can give date and time or leave it blank (like with start date)\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult_met = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nds_met = act.io.read_arm_netcdf(result_met)\nds_met\n\ndownload Radar Wind Profiler (rwp) data for wind average\n\n# pull in met data using ACT\n# Set your username and token here!\nusername = 'abchui'\ntoken = '3279f3ac6800743d'\n\n# Set the datastream and start/enddates\ndatastream = 'bnf915rwpwindavgM1.a1'\nstartdate = '2025-05-01'\nenddate = '2025-05-01T23:59:59' #notice can give date and time or leave it blank (like with start date)\n\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult_rwp = act.discovery.download_arm_data(username, token, datastream, startdate, enddate)\nds_rwp = act.io.read_arm_netcdf(result_rwp)\nds_rwp\n\ncalculate theta-e, a good indicator of cold pool\n\n# two ways to calculate theta-e: 1) pull maws data dewpoint temp and combine time or 2) calculate dewpoint temp from RH in the met data\n# method 2) is better because method 1) will cause loss of resolution\n\n# 1) to calculate theta-e, need met and maws data but by looking at the time from above you can see the time is slightly off, both are 1 min but maws if at 4 sec into the minute\n# ds_combined = xr.merge([ds_met.resample(time='1min').nearest(), ds_maws.resample(time='1min').nearest()], compat='override')\n# thetae = metpy.calc.equivalent_potential_temperature(ds_combined.atmos_pressure, ds_combined.temp_mean, ds_combined.atmospheric_dew_point)\n\n# 2) \ndewpt_temp = metpy.calc.dewpoint_from_relative_humidity(ds_met.temp_mean, ds_met.rh_mean)\nthetaeK = metpy.calc.equivalent_potential_temperature(ds_met.atmos_pressure, ds_met.temp_mean, dewpt_temp)\nthetaeC = thetaeK - 273.15*units.kelvin\n\nplot the KAZR RHI with the thetae? Or at least the mean temp and the wind barbs from rwp\n\n# Create a plotting display object with 3 plots - do I want \ndisplay = act.plotting.TimeSeriesDisplay({'KAZR2': ds_kazr2, 'MET': ds_met, 'RWP' : ds_rwp}, figsize=(15, 15), subplot_shape=(3,))\n\n# top (first) subplot (index of 0)\ndisplay.plot('reflectivity', dsname='KAZR2', subplot_index=(0,))\n\n# middle (second) subplot (index of 1)\n# Plot up the MET temperature and theta-e (calculated from met mean temp and RH)\ndisplay.plot('temp_mean', dsname='MET', subplot_index=(1,))\nax2 = display.axes[1].twinx() #copies the x axis onto both plots\nax2.plot(ds_met.time, thetaeC, color='orange')\nax2.set_ylabel('Equivalent Potential Temperature (degC)')\n\n# bottom (third) subplot (index of 2)\n# display.plot_barbs_from_spd_dir('wind_speed', num_barbs_x=20), dsname=\"RWP\", subplot_index=(2,1))\n\n# Plot up a day/night background\ndisplay.day_night_background(dsname='MET', subplot_index=(1,))\n\nplt.show()\n\n","type":"content","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-time-series#may-1","position":7},{"hierarchy":{"lvl1":"Coldpool and Downdraft Analysis","lvl2":"May 12"},"type":"lvl2","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-time-series#may-12","position":8},{"hierarchy":{"lvl1":"Coldpool and Downdraft Analysis","lvl2":"May 12"},"content":"\n\ncsacr = sorted(glob.glob(\"/data/project/ARM_Summer_School_2025/bnf/bnfcsapr2cfrS3.a1/bnfcsapr2cfrS3.a1.20250512.233012.nc\"))","type":"content","url":"/projects/bnf-2025/bnf-deep-convection/coldpool-time-series#may-12","position":9},{"hierarchy":{"lvl1":"Surface Energy Balances from Tower Sites at BNF"},"type":"lvl1","url":"/projects/bnf-2025/land-atmosphere-interactions/surface-energy-balance-all-sites","position":0},{"hierarchy":{"lvl1":"Surface Energy Balances from Tower Sites at BNF"},"content":"\n\n","type":"content","url":"/projects/bnf-2025/land-atmosphere-interactions/surface-energy-balance-all-sites","position":1},{"hierarchy":{"lvl1":"Surface Energy Balances from Tower Sites at BNF"},"type":"lvl1","url":"/projects/bnf-2025/land-atmosphere-interactions/surface-energy-balance-all-sites#surface-energy-balances-from-tower-sites-at-bnf","position":2},{"hierarchy":{"lvl1":"Surface Energy Balances from Tower Sites at BNF"},"content":"\n\n","type":"content","url":"/projects/bnf-2025/land-atmosphere-interactions/surface-energy-balance-all-sites#surface-energy-balances-from-tower-sites-at-bnf","position":3},{"hierarchy":{"lvl1":"Surface Energy Balances from Tower Sites at BNF","lvl2":"Imports"},"type":"lvl2","url":"/projects/bnf-2025/land-atmosphere-interactions/surface-energy-balance-all-sites#imports","position":4},{"hierarchy":{"lvl1":"Surface Energy Balances from Tower Sites at BNF","lvl2":"Imports"},"content":"\n\nimport act\nimport numpy as np\nimport xarray as xr\nimport matplotlib.pyplot as plt\nfrom scipy.stats import linregress\nimport matplotlib.colors as colors\nimport pandas as pd\nimport matplotlib.dates as mdates\n\n","type":"content","url":"/projects/bnf-2025/land-atmosphere-interactions/surface-energy-balance-all-sites#imports","position":5},{"hierarchy":{"lvl1":"Surface Energy Balances from Tower Sites at BNF","lvl2":"Download and Read Surface Energy Flux Datasets"},"type":"lvl2","url":"/projects/bnf-2025/land-atmosphere-interactions/surface-energy-balance-all-sites#download-and-read-surface-energy-flux-datasets","position":6},{"hierarchy":{"lvl1":"Surface Energy Balances from Tower Sites at BNF","lvl2":"Download and Read Surface Energy Flux Datasets"},"content":"\n\n# Set your username and token here!\nusername = 'mgrover4'\ntoken = '176e1559b67be630'\n\nstartdate = '2025-02-07'\nenddate = '2025-04-30T23:59:59'\n# Set the datastream and start/enddates\ndatastream_sebs_s40 = 'bnfsebsS40.b1'\ndatastream_sebs_s30 = 'bnfsebsS30.b1'\ndatastream_sebs_s20 = 'bnfsebsS20.b1'\n# Use ACT to easily download the data.  Watch for the data citation!  Show some support\n# for ARM's instrument experts and cite their data if you use it in a publication\nresult_sebs_s40 = act.discovery.download_arm_data(username, token, datastream_sebs_s40, startdate, enddate)\nresult_sebs_s30 = act.discovery.download_arm_data(username, token, datastream_sebs_s30, startdate, enddate)\nresult_sebs_s20 = act.discovery.download_arm_data(username, token, datastream_sebs_s20, startdate, enddate)\n\ndatastream_ecor_s40 = 'bnfecorsfS40.b1'\ndatastream_ecor_s30 = 'bnfecorsfS30.b1'\ndatastream_ecor_s20 = 'bnfecorsfS20.b1'\n\nresult_ecor_s40 = act.discovery.download_arm_data(username, token, datastream_ecor_s40, startdate, enddate)\nresult_ecor_s30 = act.discovery.download_arm_data(username, token, datastream_ecor_s30, startdate, enddate)\nresult_ecor_s20 = act.discovery.download_arm_data(username, token, datastream_ecor_s20, startdate, enddate)\n\ndatastream_sirs_s40 = 'bnfsirsS40.b1'\ndatastream_sirs_s30 = 'bnfsirsS30.b1'\ndatastream_sirs_s20 = 'bnfsirsS20.b1'\n\nresult_sirs_s40 = act.discovery.download_arm_data(username, token, datastream_sirs_s40, startdate, enddate)\nresult_sirs_s30 = act.discovery.download_arm_data(username, token, datastream_sirs_s30, startdate, enddate)\nresult_sirs_s20 = act.discovery.download_arm_data(username, token, datastream_sirs_s20, startdate, enddate)\n\n# Let's read in the data using ACT and check out the data\nds_sebs_s40 = act.io.read_arm_netcdf(result_sebs_s40)\nds_sebs_s30 = act.io.read_arm_netcdf(result_sebs_s30)\nds_sebs_s20 = act.io.read_arm_netcdf(result_sebs_s20)\n\nds_sebs_s40\nds_sebs_s30\nds_sebs_s20\n\n#ECOR has sensible and latent heat flux together\nds_ecor_s40 = act.io.read_arm_netcdf(result_ecor_s40)\nds_ecor_s30 = act.io.read_arm_netcdf(result_ecor_s30)\nds_ecor_s20 = act.io.read_arm_netcdf(result_ecor_s20)\n\nds_ecor_s40\nds_ecor_s30\nds_ecor_s20\n\n# Let's read in the data using ACT and check out the data\nds_sirs_s40 = act.io.read_arm_netcdf(result_sirs_s40)\nds_sirs_s30 = act.io.read_arm_netcdf(result_sirs_s30)\nds_sirs_s20 = act.io.read_arm_netcdf(result_sirs_s20)\n\nds_sirs_s40\nds_sirs_s30\nds_sirs_s20\n\n","type":"content","url":"/projects/bnf-2025/land-atmosphere-interactions/surface-energy-balance-all-sites#download-and-read-surface-energy-flux-datasets","position":7},{"hierarchy":{"lvl1":"Surface Energy Balances from Tower Sites at BNF","lvl3":"Apply Quality Control and Compute the Fluxes","lvl2":"Download and Read Surface Energy Flux Datasets"},"type":"lvl3","url":"/projects/bnf-2025/land-atmosphere-interactions/surface-energy-balance-all-sites#apply-quality-control-and-compute-the-fluxes","position":8},{"hierarchy":{"lvl1":"Surface Energy Balances from Tower Sites at BNF","lvl3":"Apply Quality Control and Compute the Fluxes","lvl2":"Download and Read Surface Energy Flux Datasets"},"content":"\n\nds_sirs_s40.clean.cleanup()\nds_sirs_s30.clean.cleanup()\nds_sirs_s20.clean.cleanup()\n\nnet_radiation_s40 = (ds_sirs_s40['down_long_hemisp1'] - ds_sirs_s40['up_long_hemisp']) + (ds_sirs_s40['down_short_hemisp'] - ds_sirs_s40['up_short_hemisp'])\nnet_radiation_s30 = (ds_sirs_s30['down_long_hemisp1'] - ds_sirs_s30['up_long_hemisp']) + (ds_sirs_s30['down_short_hemisp'] - ds_sirs_s30['up_short_hemisp'])\nnet_radiation_s20 = (ds_sirs_s20['down_long_hemisp1'] - ds_sirs_s20['up_long_hemisp']) + (ds_sirs_s20['down_short_hemisp'] - ds_sirs_s20['up_short_hemisp'])\n\n\n#net radiation calculations\nnet_radiation_s40.plot()\nnet_radiation_s30.plot()\nnet_radiation_s20.plot()\nplt.title('Net Radiation')\nplt.ylabel('Radiation')\n\nds_sebs_s40.clean.cleanup()\nds_sebs_s30.clean.cleanup()\nds_sebs_s20.clean.cleanup()\n\navail_e_s40 = net_radiation_s40 - ds_sebs_s40['surface_soil_heat_flux_avg']\navail_e_s30 = net_radiation_s30 - ds_sebs_s30['surface_soil_heat_flux_avg']\navail_e_s20 = net_radiation_s20 - ds_sebs_s20['surface_soil_heat_flux_avg']\n\n#net radiation calculations\navail_e_s40.plot()\navail_e_s30.plot()\navail_e_s20.plot()\nplt.title('Net Radiation')\nplt.ylabel('Radiation')\n\nds_ecor_s40.clean.cleanup()\nds_ecor_s30.clean.cleanup()\nds_ecor_s20.clean.cleanup()\n\nturb_flux_s40 = ds_ecor_s40['sensible_heat_flux'] + ds_ecor_s40['latent_flux']\nturb_flux_s30 = ds_ecor_s30['sensible_heat_flux'] + ds_ecor_s30['latent_flux']\nturb_flux_s20 = ds_ecor_s20['sensible_heat_flux'] + ds_ecor_s20['latent_flux']\n\n#net radiation calculations\nturb_flux_s40.plot()\nturb_flux_s30.plot()\nturb_flux_s20.plot()\nplt.title('Turbulent Flux')\nplt.ylabel('Radiation')\n\nturb_flux_aligned_s40, avail_e_aligned_s40 = xr.align(turb_flux_s40, avail_e_s40, join = 'inner')\nturb_flux_aligned_s30, avail_e_aligned_s30 = xr.align(turb_flux_s40, avail_e_s30, join = 'inner')\nturb_flux_aligned_s20, avail_e_aligned_s20 = xr.align(turb_flux_s40, avail_e_s20, join = 'inner')\n\n","type":"content","url":"/projects/bnf-2025/land-atmosphere-interactions/surface-energy-balance-all-sites#apply-quality-control-and-compute-the-fluxes","position":9},{"hierarchy":{"lvl1":"Surface Energy Balances from Tower Sites at BNF","lvl2":"Compute and Plot Daily Energy Balance Using Xarray + Time Conversion"},"type":"lvl2","url":"/projects/bnf-2025/land-atmosphere-interactions/surface-energy-balance-all-sites#compute-and-plot-daily-energy-balance-using-xarray-time-conversion","position":10},{"hierarchy":{"lvl1":"Surface Energy Balances from Tower Sites at BNF","lvl2":"Compute and Plot Daily Energy Balance Using Xarray + Time Conversion"},"content":"\n\n# --- Step 1: Timezone-aware time-of-day coordinate ---\ndef add_time_of_day(da):\n    utc_times = pd.to_datetime(da.time.values).tz_localize('UTC')\n    central_times = utc_times.tz_convert('US/Central')\n    rounded = central_times.floor('30min')\n    time_of_day_strs = xr.DataArray(rounded.strftime('%H:%M'), coords={'time': da.time}, dims='time')\n    return da.assign_coords(time_of_day=time_of_day_strs)\n\n# --- Step 2: Assign to each variable ---\nle_td_s40 = add_time_of_day(ds_ecor_s40['latent_flux'])\nle_td_s30 = add_time_of_day(ds_ecor_s30['latent_flux'])\nle_td_s20 = add_time_of_day(ds_ecor_s20['latent_flux'])\n\nh_td_s40  = add_time_of_day(ds_ecor_s40['sensible_heat_flux'])\nh_td_s30  = add_time_of_day(ds_ecor_s30['sensible_heat_flux'])\nh_td_s20  = add_time_of_day(ds_ecor_s20['sensible_heat_flux'])\n\nrn_td_s40 = add_time_of_day(net_radiation_s40)\nrn_td_s30 = add_time_of_day(net_radiation_s30)\nrn_td_s20 = add_time_of_day(net_radiation_s20)\n\ng_td_s40  = add_time_of_day(ds_sebs_s40['surface_soil_heat_flux_avg'])\ng_td_s30  = add_time_of_day(ds_sebs_s30['surface_soil_heat_flux_avg'])\ng_td_s20  = add_time_of_day(ds_sebs_s20['surface_soil_heat_flux_avg'])\n\n# --- Step 3: Group by time-of-day and average ---\nle_avg_s40 = le_td_s40.groupby('time_of_day').mean('time')\nle_avg_s30 = le_td_s30.groupby('time_of_day').mean('time')\nle_avg_s20 = le_td_s20.groupby('time_of_day').mean('time')\n\nh_avg_s40  = h_td_s40.groupby('time_of_day').mean('time')\nh_avg_s30  = h_td_s30.groupby('time_of_day').mean('time')\nh_avg_s20  = h_td_s20.groupby('time_of_day').mean('time')\n\nrn_avg_s40 = rn_td_s40.groupby('time_of_day').mean('time')\nrn_avg_s30 = rn_td_s30.groupby('time_of_day').mean('time')\nrn_avg_s20 = rn_td_s20.groupby('time_of_day').mean('time')\n\ng_avg_s40  = g_td_s40.groupby('time_of_day').mean('time')\ng_avg_s30  = g_td_s30.groupby('time_of_day').mean('time')\ng_avg_s20  = g_td_s20.groupby('time_of_day').mean('time')\n\n# --- Step 4: Sort by time ---\ndef sort_by_time(da):\n    parsed = pd.to_datetime(da.time_of_day.values, format='%H:%M')\n    sort_idx = np.argsort(parsed)\n    return da.isel(time_of_day=sort_idx)\n\nle_avg_s40 = sort_by_time(le_avg_s40)\nle_avg_s30 = sort_by_time(le_avg_s30)\nle_avg_s20 = sort_by_time(le_avg_s20)\n\nh_avg_s40  = sort_by_time(h_avg_s40)\nh_avg_s30  = sort_by_time(h_avg_s30)\nh_avg_s20  = sort_by_time(h_avg_s20)\n\nrn_avg_s40 = sort_by_time(rn_avg_s40)\nrn_avg_s30 = sort_by_time(rn_avg_s30)\nrn_avg_s20 = sort_by_time(rn_avg_s20)\n\ng_avg_s40  = sort_by_time(g_avg_s40)\ng_avg_s30  = sort_by_time(g_avg_s30)\ng_avg_s20  = sort_by_time(g_avg_s20)\n\n# --- Step 5: Prepare time axis ---\ntime_objects = pd.to_datetime(le_avg_s40.time_of_day.values, format='%H:%M')\n\nfig, axs = plt.subplots(2, 2, figsize=(14, 10), sharex=True)\naxs = axs.flatten()\n\n# Site styles: solid lines, different colors\nsite_styles = {\n    'S40': {'color': 'blue',  'label': 'S40'},\n    'S30': {'color': 'black', 'label': 'S30'},\n    'S20': {'color': 'red',   'label': 'S20'}\n}\n\nlw = 2.5\nx = time_objects\n\n# LE\naxs[0].plot(x, le_avg_s40.values, linestyle='-', linewidth=lw, **site_styles['S40'])\naxs[0].plot(x, le_avg_s30.values, linestyle='-', linewidth=lw, **site_styles['S30'])\naxs[0].plot(x, le_avg_s20.values, linestyle='-', linewidth=lw, **site_styles['S20'])\naxs[0].set_title(\"Latent Heat Flux (LE)\", fontsize=14)\naxs[0].legend(fontsize=12)\naxs[0].grid(True)\n\n# H\naxs[1].plot(x, h_avg_s40.values, linestyle='-', linewidth=lw, **site_styles['S40'])\naxs[1].plot(x, h_avg_s30.values, linestyle='-', linewidth=lw, **site_styles['S30'])\naxs[1].plot(x, h_avg_s20.values, linestyle='-', linewidth=lw, **site_styles['S20'])\naxs[1].set_title(\"Sensible Heat Flux (H)\", fontsize=14)\naxs[1].legend(fontsize=12)\naxs[1].grid(True)\n\n# Rn\naxs[2].plot(x, rn_avg_s40.values, linestyle='-', linewidth=lw, **site_styles['S40'])\naxs[2].plot(x, rn_avg_s30.values, linestyle='-', linewidth=lw, **site_styles['S30'])\naxs[2].plot(x, rn_avg_s20.values, linestyle='-', linewidth=lw, **site_styles['S20'])\naxs[2].set_title(\"Net Radiation (Rn)\", fontsize=14)\naxs[2].legend(fontsize=12)\naxs[2].grid(True)\n\n# G\naxs[3].plot(x, g_avg_s40.values, linestyle='-', linewidth=lw, **site_styles['S40'])\naxs[3].plot(x, g_avg_s30.values, linestyle='-', linewidth=lw, **site_styles['S30'])\naxs[3].plot(x, g_avg_s20.values, linestyle='-', linewidth=lw, **site_styles['S20'])\naxs[3].set_title(\"Soil Heat Flux (G)\", fontsize=14)\naxs[3].legend(fontsize=12)\naxs[3].grid(True)\n\n# Shared X-axis formatting\nfor ax in axs:\n    ax.set_xlim([x[0], x[-1]])\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))\n    ax.xaxis.set_major_locator(mdates.HourLocator(interval=2))\n    ax.set_xlabel(\"Time of Day (Central)\", fontsize=14)\n    ax.set_ylabel(\"W/m²\", fontsize=14)\n\nplt.suptitle(\"Diurnal Cycles at BNF: Comparison Across S40, S30, S20\", fontsize=16)\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.show()\n","type":"content","url":"/projects/bnf-2025/land-atmosphere-interactions/surface-energy-balance-all-sites#compute-and-plot-daily-energy-balance-using-xarray-time-conversion","position":11}]}