{"version":2,"kind":"Notebook","sha256":"8ac589c1acf84aae2c662365357f6f816f48540a4d9676ba1bfb9750748eb85d","slug":"foundations.pyart.pyart-qpe","location":"/foundations/pyart/pyart-qpe.ipynb","dependencies":[],"frontmatter":{"title":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"arm-summer-school-2025-dev","language":"python"},"authors":[{"nameParsed":{"literal":"Max Grover","given":"Max","family":"Grover"},"name":"Max Grover","orcid":"0000-0002-0370-8974","github":"mgrover1","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/mgrover1/arm-field-site-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":2}},"source_url":"https://github.com/mgrover1/arm-field-site-cookbook/blob/main/foundations/pyart/pyart-qpe.ipynb","edit_url":"https://github.com/mgrover1/arm-field-site-cookbook/edit/main/foundations/pyart/pyart-qpe.ipynb","thumbnail":"/arm-field-site-cookbook/build/arm_logo-6f047c4974ad6fdbb8db9ed89f3b899d.png","exports":[{"format":"ipynb","filename":"pyart-qpe.ipynb","url":"/arm-field-site-cookbook/build/pyart-qpe-7540aadf50925581c7ddf8fce562bdc9.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/arm-field-site-cookbook/build/arm_logo-6f047c4974ad6fdbb8db9ed89f3b899d.png","alt":"ARM Logo","width":500,"key":"GR5gH5yGgu","urlSource":"../../images/arm_logo.png"}],"key":"zAGkjhcR1E"}],"key":"JUoiQfi52s"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NZFB1QbFSu"}],"identifier":"quantitative-precipitation-estimate-qpe-analysis-with-py-art","label":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","html_id":"quantitative-precipitation-estimate-qpe-analysis-with-py-art","implicit":true,"key":"qARh0pjJAK"},{"type":"thematicBreak","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"B6qHiGTzzA"}],"key":"PsHY9XCMKr"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tpffgDHg8A"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"QLdem8Qpcz"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Within this notebook, we will cover:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EFkwck2zmN"}],"key":"FgBHOLQ67b"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Calculation of QPE from various radar fields","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"KqCLMd3bcz"}],"key":"cRVRcZ3mkn"}],"key":"VzA6smXxea"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Genearting a gridded QPE product","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"paLVJ3icip"}],"key":"QwRswqaqVg"}],"key":"srqs73fpy6"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Comparison against operational models (MRMS)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"tPklt3CXIp"}],"key":"GPxDBDg9GD"}],"key":"u8xTdVrhcW"}],"key":"E0XbVi3onK"},{"type":"heading","depth":2,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"hDbyoomggm"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"S3FE8o7qS1"},{"type":"table","position":{"start":{"line":9,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"SQGvLMjN4R"}],"key":"cGlAYQrDF3"},{"type":"tableCell","header":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"aN88CWihix"}],"key":"NgYzlYblEI"},{"type":"tableCell","header":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"eA645mZnz7"}],"key":"nmJmV909OI"}],"key":"mP9a6pLFFA"},{"type":"tableRow","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"link","url":"/foundations/pyart/pyart-basics","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Py-ART Basics","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"JRkHK6SFlN"}],"urlSource":"pyart-basics","dataUrl":"/foundations.pyart.pyart-basics.json","internal":true,"protocol":"file","key":"bBn3jNk20K"}],"key":"Sp1U2CH0mV"},{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"itsW9s9aUd"}],"key":"nNCpSPtbrf"},{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Basic features","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"J0zRTZbHQy"}],"key":"a6JzQdDhtT"}],"key":"t9uBrtfZ3j"},{"type":"tableRow","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"link","url":"https://projectpythia.org/radar-cookbook/README.html","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Weather Radar Basics","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"NDQnHbXzIt"}],"urlSource":"https://projectpythia.org/radar-cookbook/README.html","key":"B8mKyqevm3"}],"key":"eAYgjHyR1Z"},{"type":"tableCell","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"nY3b4VTT64"}],"key":"wSKip5BeB9"},{"type":"tableCell","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Background Information","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"mYvt5RfoBn"}],"key":"UEfcHAKQfK"}],"key":"hJgKHuIVCC"},{"type":"tableRow","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib/matplotlib-basics.html","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Matplotlib Basics","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"gU00ZFIenu"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib/matplotlib-basics.html","key":"RaRD05v4pC"}],"key":"SfgkTHhiN4"},{"type":"tableCell","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"nnrI2NjV0H"}],"key":"oMlVCHp99B"},{"type":"tableCell","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Basic plotting","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"UkCGVfityb"}],"key":"fJo4XR45tU"}],"key":"fuxQyn0f3n"},{"type":"tableRow","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy/numpy-basics.html","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"NumPy Basics","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"eOpQdimZXi"}],"urlSource":"https://foundations.projectpythia.org/core/numpy/numpy-basics.html","key":"owZ3rCXyex"}],"key":"llt4BMAmL4"},{"type":"tableCell","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"WhjOFh1Utw"}],"key":"pj85cRKRwc"},{"type":"tableCell","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Basic arrays","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"suHloyqUjV"}],"key":"CIsMXd3VVC"}],"key":"Nl5jNFsJ0P"},{"type":"tableRow","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/xarray.html","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Xarray Basics","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"mwVzWggAe4"}],"urlSource":"https://foundations.projectpythia.org/core/xarray.html","key":"oYB1fBC4mm"}],"key":"R8ASlC6Im1"},{"type":"tableCell","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"Vb6EKOzwPE"}],"key":"oRfPhon5j5"},{"type":"tableCell","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Multi-dimensional arrays","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"D3f1GPSV3x"}],"key":"XJCg6zdm52"}],"key":"mLyazrIofD"}],"key":"HCV2Z1qGc3"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"paragraph","children":[{"type":"strong","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"AvNlR1GV7y"}],"key":"VjCgjm5Oma"},{"type":"text","value":": 15 minutes","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"ZV01VPz2ER"}],"key":"p4bZ48MXwM"}],"key":"ZxXkrOxKYV"}],"key":"wWqAx4kYgf"},{"type":"thematicBreak","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"KeplREXk8j"}],"key":"RHO9kq2f5D"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LzHOm0T3eW"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"wS7mKE3Q8A"}],"key":"ufGvUlCtmA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport warnings\nimport glob\n\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport xarray as xr\n\nimport pyart\nfrom pyart.testing import get_test_data\nimport xradar as xd\n\nwarnings.filterwarnings('ignore')","key":"mJpMWnbrb4"},{"type":"output","id":"YFq3yruLoksrzuDeZr6de","data":[{"output_type":"stream","name":"stdout","text":"\n## You are using the Python ARM Radar Toolkit (Py-ART), an open source\n## library for working with weather radar data. Py-ART is partly\n## supported by the U.S. Department of Energy as part of the Atmospheric\n## Radiation Measurement (ARM) Climate Research Facility, an Office of\n## Science user facility.\n##\n## If you use this software to prepare a publication, please cite:\n##\n##     JJ Helmus and SM Collis, JORS 2016, doi: 10.5334/jors.119\n\n"}],"key":"OIGUQVdqvS"}],"key":"i3ulLjHlwA"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Investigate the Available Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YGgyHoc63I"}],"identifier":"investigate-the-available-data","label":"Investigate the Available Data","html_id":"investigate-the-available-data","implicit":true,"key":"evQzmt470g"}],"key":"al17HzAGFI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"file_list = sorted(glob.glob(\"/data/project/ARM_Summer_School_2025/radar/csapr2/ppi/*20250519*\"))\nfile_list","key":"kLjg46GyMu"},{"type":"output","id":"HiJU_LvUqeScid-QMCbLo","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"[]","content_type":"text/plain"}}}],"key":"kB53JNIPGK"}],"key":"CGHVL1d14Z"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"dt = xd.io.open_cfradial1_datatree(file_list[0])\ndt","key":"hrHbz26rvJ"},{"type":"output","id":"weD47QuPfLSKDVt7BdYSJ","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mIndexError\u001b[39m                                Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[3]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m dt = xd.io.open_cfradial1_datatree(\u001b[43mfile_list\u001b[49m\u001b[43m[\u001b[49m\u001b[32;43m0\u001b[39;49m\u001b[43m]\u001b[49m)\n\u001b[32m      2\u001b[39m dt\n\n\u001b[31mIndexError\u001b[39m: list index out of range","ename":"IndexError","evalue":"list index out of range"}],"key":"poqoPgDwks"}],"key":"qrtmIxcOGl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"radar = pyart.xradar.Xradar(dt)\ndisplay = pyart.graph.RadarDisplay(radar)","key":"U2vczur533"},{"type":"output","id":"AWsCTUH86jjrf0lbo2avm","data":[],"key":"EqXY0iWEiK"}],"key":"S8s5pOeJz2"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"radar","key":"w8ol6EhUsf"},{"type":"output","id":"Vuk1U0K2-sa3QgRsJmnAg","data":[],"key":"cryebs3v9n"}],"key":"Ks9Fq01gOU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Generate matplotlib figure and axe array objects\nfig, axarr = plt.subplots(2, 2, figsize=[20, 12])\nplt.subplots_adjust(hspace=0.35)\n\n# reflectivity\ndisplay.plot('reflectivity', sweep=0, ax=axarr[0, 0], cmap='ChaseSpectral')\n\n# differential reflectivity\ndisplay.plot(\"differential_reflectivity\", sweep=0, ax=axarr[0, 1], cmap=\"RdBu_r\", vmin=-2, vmax=2)\n\n# doppler velocity\ndisplay.plot(\"mean_doppler_velocity\", sweep=0, ax=axarr[1, 0], cmap=\"RdBu_r\", vmin=-16, vmax=16)\n\n# differential phase\ndisplay.plot(\"specific_differential_phase\", sweep=0, ax=axarr[1, 1], cmap=\"ChaseSpectral\")","key":"lW60TCNhhl"},{"type":"output","id":"HFDvz1zJsrmWTsg6w4sAE","data":[],"key":"OOHAooyV6d"}],"key":"td6WftO7o5"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"QPE Functions","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zVQJL5hFi1"}],"identifier":"qpe-functions","label":"QPE Functions","html_id":"qpe-functions","implicit":true,"key":"lnl2eBonzk"}],"key":"XwHlqhRy3u"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def reflectivity_rain(radar, refl=\"reflectivity\", alpha=0.0376, beta=0.6112):\n    \"\"\"\n    Function to calculate rainfall rates from radar reflectivity factor\n\n    Inputs\n    ------\n    radar : Py-ART Radar Object\n        Py-ART radar object to extract reflectivity field from\n    refl : str\n        Specific name of reflectivity field within radar object\n    alpha : float\n        fit parameter\n    beta : float\n        fit parameter\n\n    Outputs\n    -------\n    radar : Py-ART Radar Object\n        Py-ART radar object with rainfall estimate from reflectivity included\n    \"\"\"\n    # define a gatefilter to apply the relationship to\n    gatefilter_z = pyart.correct.GateFilter(radar)\n    gatefilter_z.exclude_above(refl, 35)\n    # Apply the gatefilter to the rain rate\n    masked_z = np.ma.masked_array(radar.fields[refl]['data'], mask=gatefilter_z.gate_excluded) \n    # Apply the R(Z) relationship\n    rr_data = alpha * np.ma.power(np.ma.power(10.0, 0.1 * masked_z), beta)\n    # define the dictionary structure for the rain rate data\n    rain = pyart.config.get_metadata(\"radar_estimated_rain_rate\")\n    rain[\"long_name\"] = \"R(Z) Radar Estimated Rain Rate\"\n    rain[\"standard_name\"] = \"R(Z) Radar Estimated Rain Rate\"\n    rain[\"data\"] = rr_data\n    # add the field back into the radar object\n    radar.add_field(\"rain_z\", rain)\n\n    return radar","key":"qF7Sa7nQW1"},{"type":"output","id":"hV73XcIl-LY4_lIh6b_ZL","data":[],"key":"x6Xicc96mb"}],"key":"jwSRCM3LGl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def kdp_rain(radar, phase=\"specific_differential_phase\", alpha=25.1, beta=0.777):\n    \"\"\"\n    Function to calculate rainfall rates from specific differential phase\n    Inputs\n    ------\n    radar : Py-ART Radar Object\n        Py-ART radar object to extract reflectivity field from\n    refl : str\n        Specific name of reflectivity field within radar object\n    alpha : float\n        fit parameter\n    beta : float\n        fit parameter\n\n    Outputs\n    -------\n    radar : Py-ART Radar Object\n        Py-ART radar object with rainfall estimate from reflectivity included\n    \"\"\"\n    # define a gatefilter to apply the relationship to\n    gatefilter_kdp = pyart.correct.GateFilter(radar)\n    gatefilter_kdp.exclude_below('reflectivity', 35)\n    # Apply the gatefilter to the rain rate\n    masked_z = np.ma.masked_array(radar.fields[phase]['data'], mask=gatefilter_kdp.gate_excluded) \n    # define the reflectivity data\n    reflect = radar.fields[phase][\"data\"]\n    rr_data = alpha * np.ma.power(np.ma.power(10.0, 0.1 * masked_z), beta)\n    # define the dictionary structure for the rain rate data\n    rain = pyart.config.get_metadata(\"radar_estimated_rain_rate\")\n    rain[\"long_name\"] = \"R(KDP) Radar Estimated Rain Rate\"\n    rain[\"standard_name\"] = \"R(KDP) Radar Estimated Rain Rate\"\n    rain[\"data\"] = rr_data\n    # add the field back into the radar object\n    radar.add_field(\"rain_kdp\", rain)\n\n    return radar","key":"wZFvKenBOH"},{"type":"output","id":"1fNi2aKZNGrNQID5IFVo_","data":[],"key":"RXgfRooBNR"}],"key":"UvXoS6IsOr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Apply the Radar estimated rain rates \nradar = reflectivity_rain(radar)\nradar = kdp_rain(radar)\nradar[\"sweep_1\"]","key":"Agc68oZIyq"},{"type":"output","id":"4HX5q5p0w6WhIYgzqjG4_","data":[],"key":"OGfC1Vnydu"}],"key":"bToRISpUvF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"display = pyart.graph.RadarDisplay(radar)\n# Generate matplotlib figure and axe array objects\nfig, axarr = plt.subplots(1, 2, figsize=[14, 5])\nplt.subplots_adjust(wspace=0.2, hspace=0.35)\n\n# reflectivity\ndisplay.plot('rain_z', sweep=0, ax=axarr[0], cmap='ChaseSpectral')\n\n# differential reflectivity\ndisplay.plot(\"rain_kdp\", sweep=0, ax=axarr[1], cmap=\"RdBu_r\")","key":"k0sZwG1aSQ"},{"type":"output","id":"6cuUnIPKkghnQv3H7Lxhf","data":[],"key":"lL8tCGbTF7"}],"key":"Lwo8mNG09P"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Combined Radar Estimated Rainfall Product","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LGmPi4QuXV"}],"identifier":"combined-radar-estimated-rainfall-product","label":"Combined Radar Estimated Rainfall Product","html_id":"combined-radar-estimated-rainfall-product","implicit":true,"key":"n2TimJiYwJ"}],"key":"fM0lp5WTRL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"radar.fields[\"rain_z\"][\"data\"].mask","key":"vB9mdKh2Ec"},{"type":"output","id":"qdom5nSWwPlB2gZBoT2_2","data":[],"key":"Z0I0s8sSRW"}],"key":"s9UDAx5gbo"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"combined_data = np.where(~radar.fields[\"rain_z\"][\"data\"].mask, radar.fields[\"rain_z\"][\"data\"], radar.fields[\"rain_kdp\"][\"data\"])\n# Combine the masks using logical OR (mask where either is masked)\ncombined_mask = np.ma.mask_or(radar.fields[\"rain_z\"][\"data\"].mask, radar.fields[\"rain_kdp\"][\"data\"].mask)\n\n# Merge data and apply the combined mask\nmerged = np.ma.array(combined_data, mask=combined_mask)","key":"NXA8n1oX54"},{"type":"output","id":"KKVRiAEEMoYMoHmWUI7CW","data":[],"key":"oZWoIAavJp"}],"key":"MZkX82KbSe"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"combined_data","key":"iJpNIKs5Gz"},{"type":"output","id":"ueUer_KgscABxHt3hEdpB","data":[],"key":"Ig01CgS6S5"}],"key":"LJ3raT1xsa"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# define the dictionary structure for the rain rate data\nrain = pyart.config.get_metadata(\"radar_estimated_rain_rate\")\nrain[\"long_name\"] = \"R(Z+KDP) Radar Estimated Rain Rate\"\nrain[\"standard_name\"] = \"R(Z+KDP) Radar Estimated Rain Rate\"\nrain[\"data\"] = combined_data\n# add the field back into the radar object\nradar.add_field(\"rain_combined\", rain)","key":"EZSAtkXLoU"},{"type":"output","id":"ONPCr2SpFbEBJNxAOAOKp","data":[],"key":"iVwEBbgoR1"}],"key":"sD8lxEDM30"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"display = pyart.graph.RadarDisplay(radar)\n# Generate matplotlib figure and axe array objects\nfig, axarr = plt.subplots(1, 2, figsize=[14, 5])\nplt.subplots_adjust(wspace=0.2, hspace=0.35)\n\n# reflectivity\ndisplay.plot('rain_combined', sweep=0, ax=axarr[0], cmap='ChaseSpectral', vmax=10)\n# reflectivity\ndisplay.plot('reflectivity', sweep=0, ax=axarr[1], cmap='ChaseSpectral')","key":"o0DgUmnfWB"},{"type":"output","id":"ac834M35tHvRVDcRkMU8M","data":[],"key":"lnznOZ5AnL"}],"key":"nmSUQ7K2zb"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Create a Gridded QPE Product for Future Comparison with Model/MRMS","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uq19jxJw46"}],"identifier":"create-a-gridded-qpe-product-for-future-comparison-with-model-mrms","label":"Create a Gridded QPE Product for Future Comparison with Model/MRMS","html_id":"create-a-gridded-qpe-product-for-future-comparison-with-model-mrms","implicit":true,"key":"mWRKEJUJzA"}],"key":"wZBeY1t73k"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def bnf_grid(radar, \n             z_limits=(250., 15_000.), \n             y_limits=(-30_000., 30_000), \n             x_limits=(-30_000., 30_000),\n             resolution=250\n):\n    \"\"\"\n    Function to create a Py-ART grid object from a given radar file\n\n    Inputs\n    ------\n    radar : Py-ART radar object\n        Py-ART radar object to create a grid object from\n    z_limits : tuple\n        vertical dimension grid limits\n    y_limits : tuple\n        longitude dimension grid limits\n    x_limits : tuple\n        latitude dimension grid limits\n    resolution : float\n        desired resolution of our grid object\n\n    Calls\n    -----\n    compute_number_of_points\n        compute number of gates in each direction\n\n    Outputs\n    -------\n    grid : Py-ART Grid object\n    \"\"\"\n    def compute_number_of_points(extent, resolution):\n        return int((extent[1] - extent[0])/resolution)\n\n    z_grid_points = compute_number_of_points(z_limits, resolution)\n    x_grid_points = compute_number_of_points(x_limits, resolution)\n    y_grid_points = compute_number_of_points(y_limits, resolution)\n\n    grid = pyart.map.grid_from_radars([radar],\n                                      grid_shape=(z_grid_points,\n                                                  y_grid_points,\n                                                  x_grid_points),\n                                      grid_limits=(z_grid_limits,\n                                                   y_grid_limits,\n                                                   x_grid_limits),\n    )\n\n    return grid","key":"SV84iOgSGH"},{"type":"output","id":"19BzdN2aLjGG6aHN2b0rf","data":[],"key":"HlKW22yBwu"}],"key":"Whs0lujVww"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"grid = bnf_grid(radar)","key":"qEFyVzpaqA"},{"type":"output","id":"P5Oy5SHbrchYTTZ7tmOXt","data":[],"key":"h5fS5UdjRY"}],"key":"VdQ5zB0yiS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"display = pyart.graph.GridMapDisplay(grid)\ndisplay.plot_grid('rain_combined',\n                  level=1,\n                  vmin=0.1,\n                  vmax=15,\n                  cmap='HomeyerRainbow')","key":"waRWzEvw3a"},{"type":"output","id":"FAKipSdhzznYRzTO396KL","data":[],"key":"yJKYpJg4BE"}],"key":"sCvsoVD3n5"}],"key":"tYFWN6ZQg6"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Py-ART Corrections","url":"/foundations/pyart/pyart-corrections","group":"Radar Data with Py-ART"},"next":{"title":"ACT Basics with BNF","url":"/foundations/act/act-basics-bnf","group":"Timeseries Data with ACT"}}},"domain":"http://localhost:3000"}