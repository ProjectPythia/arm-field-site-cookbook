{"version":2,"kind":"Notebook","sha256":"8ac589c1acf84aae2c662365357f6f816f48540a4d9676ba1bfb9750748eb85d","slug":"foundations.pyart.pyart-qpe","location":"/foundations/pyart/pyart-qpe.ipynb","dependencies":[],"frontmatter":{"title":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"arm-summer-school-2025-dev","language":"python"},"authors":[{"nameParsed":{"literal":"Max Grover","given":"Max","family":"Grover"},"name":"Max Grover","orcid":"0000-0002-0370-8974","github":"mgrover1","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/mgrover1/arm-field-site-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/mgrover1/arm-field-site-cookbook/blob/main/foundations/pyart/pyart-qpe.ipynb","thumbnail":"/arm-field-site-cookbook/build/arm_logo-71364580e1fc0a27d7a5217757bb976d.png","exports":[{"format":"ipynb","filename":"pyart-qpe.ipynb","url":"/arm-field-site-cookbook/build/pyart-qpe-16e292843f57358780ff5d02e4b9d156.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/arm-field-site-cookbook/build/arm_logo-71364580e1fc0a27d7a5217757bb976d.png","alt":"ARM Logo","width":500,"key":"rMW9gQYBJM","urlSource":"../../images/arm_logo.png"}],"key":"mYRkVdrqHD"}],"key":"HGNDdiqPdP"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PgZNChQDAA"}],"identifier":"quantitative-precipitation-estimate-qpe-analysis-with-py-art","label":"Quantitative Precipitation Estimate (QPE) Analysis with Py-ART","html_id":"quantitative-precipitation-estimate-qpe-analysis-with-py-art","implicit":true,"key":"jMkOU8HVE1"},{"type":"thematicBreak","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"YQNxOMZUZj"}],"key":"xo7VmylKwU"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cBOZZ9XvwS"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"unIotGKT9A"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Within this notebook, we will cover:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tztA5AT73v"}],"key":"EAguVxGGVC"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Calculation of QPE from various radar fields","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"wyPrs7Jfb9"}],"key":"uBQVzIQK95"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Genearting a gridded QPE product","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"X4OJBUS1tR"}],"key":"pxmTHVMoou"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Comparison against operational models (MRMS)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"sY1akEmsI9"}],"key":"IWSsELGLoV"}],"key":"UOdqdu2x7E"},{"type":"heading","depth":2,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"rI5RziVOHj"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"HGdCCAUNe9"},{"type":"table","position":{"start":{"line":9,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"RBgEGGn8nn"}],"key":"JdNPO590xz"},{"type":"tableCell","header":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"C07gmsgT11"}],"key":"dtJGHnkVoe"},{"type":"tableCell","header":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"RKcX4cKAz0"}],"key":"g1f3yXWVxG"}],"key":"vn3T9OLkFM"},{"type":"tableRow","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"link","url":"/foundations/pyart/pyart-basics","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Py-ART Basics","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"NNSoCJ3heq"}],"urlSource":"pyart-basics","dataUrl":"/foundations.pyart.pyart-basics.json","internal":true,"protocol":"file","key":"V1C8ueqiZC"}],"key":"hT7CbegV06"},{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"oUGZ3ECcDt"}],"key":"RovwaHtu73"},{"type":"tableCell","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Basic features","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"JhpDul58nf"}],"key":"ruCobJjJyv"}],"key":"FkSwvaaeN2"},{"type":"tableRow","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"link","url":"https://projectpythia.org/radar-cookbook/README.html","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Weather Radar Basics","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"yDtt3Yftc5"}],"urlSource":"https://projectpythia.org/radar-cookbook/README.html","key":"LtQamOwiwJ"}],"key":"HfK9e7FDCw"},{"type":"tableCell","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"DsIqC8UwyX"}],"key":"PSVu8NcNBB"},{"type":"tableCell","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Background Information","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"oaTjtQi989"}],"key":"S9TKsMDwpp"}],"key":"fODuCpxLC0"},{"type":"tableRow","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib/matplotlib-basics.html","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Matplotlib Basics","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"KqBz4mXU5R"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib/matplotlib-basics.html","key":"uHxEurGe3n"}],"key":"Btos0seva6"},{"type":"tableCell","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"BDwgXRLbMo"}],"key":"eTFXgFlqkY"},{"type":"tableCell","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Basic plotting","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"mX2cUDmySm"}],"key":"WKaTJRracs"}],"key":"oVPbOypTWe"},{"type":"tableRow","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/numpy/numpy-basics.html","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"NumPy Basics","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"fH6HS8JSwo"}],"urlSource":"https://foundations.projectpythia.org/core/numpy/numpy-basics.html","key":"wK11FnYbsn"}],"key":"nry04Xi4H9"},{"type":"tableCell","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"pcfwMYmK78"}],"key":"GLsFX0i2Hd"},{"type":"tableCell","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Basic arrays","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"kNm6a0dia7"}],"key":"TlRJ5nEPgo"}],"key":"IV3JHbW61K"},{"type":"tableRow","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/xarray.html","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Xarray Basics","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"S7F8Owi64Z"}],"urlSource":"https://foundations.projectpythia.org/core/xarray.html","key":"atZ29dOcZ8"}],"key":"ZfyT9qRHR9"},{"type":"tableCell","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"tE7L5lsGZz"}],"key":"Fj10jN1k9h"},{"type":"tableCell","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Multi-dimensional arrays","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"OZUJwXjvGB"}],"key":"eqfdTJCDHQ"}],"key":"ZpjZSgM8Nn"}],"key":"qfopPQVB3q"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"strong","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"kcjxDixJtN"}],"key":"uLAk9MRcmi"},{"type":"text","value":": 15 minutes","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"ZMYN2tRylq"}],"key":"eSlFFH39a3"}],"key":"OZr7lI5ahs"},{"type":"thematicBreak","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"qilnMaPOLQ"}],"key":"Y6xFisbr5D"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NsCbVpBUDm"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"m7UfxlYZuy"}],"key":"Nj4eF7Jked"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport warnings\nimport glob\n\nimport cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport xarray as xr\n\nimport pyart\nfrom pyart.testing import get_test_data\nimport xradar as xd\n\nwarnings.filterwarnings('ignore')","key":"TDbY8HeYtp"},{"type":"output","id":"x5ZKmawFKGa-7Wa4BNXpT","data":[{"output_type":"stream","name":"stdout","text":"\n## You are using the Python ARM Radar Toolkit (Py-ART), an open source\n## library for working with weather radar data. Py-ART is partly\n## supported by the U.S. Department of Energy as part of the Atmospheric\n## Radiation Measurement (ARM) Climate Research Facility, an Office of\n## Science user facility.\n##\n## If you use this software to prepare a publication, please cite:\n##\n##     JJ Helmus and SM Collis, JORS 2016, doi: 10.5334/jors.119\n\n"}],"key":"eztyekQWJT"}],"key":"dOZkZlWWmY"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Investigate the Available Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mOGWpdoynN"}],"identifier":"investigate-the-available-data","label":"Investigate the Available Data","html_id":"investigate-the-available-data","implicit":true,"key":"LP85nVbh6z"}],"key":"z7zGHrhnUa"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"file_list = sorted(glob.glob(\"/data/project/ARM_Summer_School_2025/radar/csapr2/ppi/*20250519*\"))\nfile_list","key":"xmtscTurzT"},{"type":"output","id":"4aeZdkWGgeSZMTJ-gxQeH","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"[]","content_type":"text/plain"}}}],"key":"KZVyKIEika"}],"key":"JJJOq624kt"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"dt = xd.io.open_cfradial1_datatree(file_list[0])\ndt","key":"OKILEs1bh7"},{"type":"output","id":"ON63zkOiLK5teTLAXnIUB","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mIndexError\u001b[39m                                Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[3]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m dt = xd.io.open_cfradial1_datatree(\u001b[43mfile_list\u001b[49m\u001b[43m[\u001b[49m\u001b[32;43m0\u001b[39;49m\u001b[43m]\u001b[49m)\n\u001b[32m      2\u001b[39m dt\n\n\u001b[31mIndexError\u001b[39m: list index out of range","ename":"IndexError","evalue":"list index out of range"}],"key":"TA0HXyB9hU"}],"key":"qYQEks9vfD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"radar = pyart.xradar.Xradar(dt)\ndisplay = pyart.graph.RadarDisplay(radar)","key":"Wgrf5iGQp4"},{"type":"output","id":"8HPjBq5czmXGswzc9A_h4","data":[],"key":"SmVOlezLPF"}],"key":"auSKvedanF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"radar","key":"CueEU4snxF"},{"type":"output","id":"I6RJtnPQAGF6y7lUAFKYs","data":[],"key":"NJP3hGgB7v"}],"key":"NsGS9XjSdP"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Generate matplotlib figure and axe array objects\nfig, axarr = plt.subplots(2, 2, figsize=[20, 12])\nplt.subplots_adjust(hspace=0.35)\n\n# reflectivity\ndisplay.plot('reflectivity', sweep=0, ax=axarr[0, 0], cmap='ChaseSpectral')\n\n# differential reflectivity\ndisplay.plot(\"differential_reflectivity\", sweep=0, ax=axarr[0, 1], cmap=\"RdBu_r\", vmin=-2, vmax=2)\n\n# doppler velocity\ndisplay.plot(\"mean_doppler_velocity\", sweep=0, ax=axarr[1, 0], cmap=\"RdBu_r\", vmin=-16, vmax=16)\n\n# differential phase\ndisplay.plot(\"specific_differential_phase\", sweep=0, ax=axarr[1, 1], cmap=\"ChaseSpectral\")","key":"V6RonZLrtg"},{"type":"output","id":"3Vlzic77CNQiCf88XXhXQ","data":[],"key":"v8OyUZzFe1"}],"key":"VQR0v4UfJt"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"QPE Functions","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Eb0UqackU1"}],"identifier":"qpe-functions","label":"QPE Functions","html_id":"qpe-functions","implicit":true,"key":"jwHVw65MXq"}],"key":"ykRigIxYCS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def reflectivity_rain(radar, refl=\"reflectivity\", alpha=0.0376, beta=0.6112):\n    \"\"\"\n    Function to calculate rainfall rates from radar reflectivity factor\n\n    Inputs\n    ------\n    radar : Py-ART Radar Object\n        Py-ART radar object to extract reflectivity field from\n    refl : str\n        Specific name of reflectivity field within radar object\n    alpha : float\n        fit parameter\n    beta : float\n        fit parameter\n\n    Outputs\n    -------\n    radar : Py-ART Radar Object\n        Py-ART radar object with rainfall estimate from reflectivity included\n    \"\"\"\n    # define a gatefilter to apply the relationship to\n    gatefilter_z = pyart.correct.GateFilter(radar)\n    gatefilter_z.exclude_above(refl, 35)\n    # Apply the gatefilter to the rain rate\n    masked_z = np.ma.masked_array(radar.fields[refl]['data'], mask=gatefilter_z.gate_excluded) \n    # Apply the R(Z) relationship\n    rr_data = alpha * np.ma.power(np.ma.power(10.0, 0.1 * masked_z), beta)\n    # define the dictionary structure for the rain rate data\n    rain = pyart.config.get_metadata(\"radar_estimated_rain_rate\")\n    rain[\"long_name\"] = \"R(Z) Radar Estimated Rain Rate\"\n    rain[\"standard_name\"] = \"R(Z) Radar Estimated Rain Rate\"\n    rain[\"data\"] = rr_data\n    # add the field back into the radar object\n    radar.add_field(\"rain_z\", rain)\n\n    return radar","key":"bNKQALwMOt"},{"type":"output","id":"8UfkVLR9zYqmFNUl-Ya5I","data":[],"key":"TEk1O1pbyW"}],"key":"nGRPbm6WhB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def kdp_rain(radar, phase=\"specific_differential_phase\", alpha=25.1, beta=0.777):\n    \"\"\"\n    Function to calculate rainfall rates from specific differential phase\n    Inputs\n    ------\n    radar : Py-ART Radar Object\n        Py-ART radar object to extract reflectivity field from\n    refl : str\n        Specific name of reflectivity field within radar object\n    alpha : float\n        fit parameter\n    beta : float\n        fit parameter\n\n    Outputs\n    -------\n    radar : Py-ART Radar Object\n        Py-ART radar object with rainfall estimate from reflectivity included\n    \"\"\"\n    # define a gatefilter to apply the relationship to\n    gatefilter_kdp = pyart.correct.GateFilter(radar)\n    gatefilter_kdp.exclude_below('reflectivity', 35)\n    # Apply the gatefilter to the rain rate\n    masked_z = np.ma.masked_array(radar.fields[phase]['data'], mask=gatefilter_kdp.gate_excluded) \n    # define the reflectivity data\n    reflect = radar.fields[phase][\"data\"]\n    rr_data = alpha * np.ma.power(np.ma.power(10.0, 0.1 * masked_z), beta)\n    # define the dictionary structure for the rain rate data\n    rain = pyart.config.get_metadata(\"radar_estimated_rain_rate\")\n    rain[\"long_name\"] = \"R(KDP) Radar Estimated Rain Rate\"\n    rain[\"standard_name\"] = \"R(KDP) Radar Estimated Rain Rate\"\n    rain[\"data\"] = rr_data\n    # add the field back into the radar object\n    radar.add_field(\"rain_kdp\", rain)\n\n    return radar","key":"gnscKkKcmS"},{"type":"output","id":"oZLyPbDileVyYlKVf4vey","data":[],"key":"kia78gTka8"}],"key":"xvVp4zceyS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Apply the Radar estimated rain rates \nradar = reflectivity_rain(radar)\nradar = kdp_rain(radar)\nradar[\"sweep_1\"]","key":"zwuSwYcZfh"},{"type":"output","id":"mtXZ2xrYvdpakgWF-3GtU","data":[],"key":"yMcywLWPfQ"}],"key":"zXe3zI5BDd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"display = pyart.graph.RadarDisplay(radar)\n# Generate matplotlib figure and axe array objects\nfig, axarr = plt.subplots(1, 2, figsize=[14, 5])\nplt.subplots_adjust(wspace=0.2, hspace=0.35)\n\n# reflectivity\ndisplay.plot('rain_z', sweep=0, ax=axarr[0], cmap='ChaseSpectral')\n\n# differential reflectivity\ndisplay.plot(\"rain_kdp\", sweep=0, ax=axarr[1], cmap=\"RdBu_r\")","key":"SeMRvQY3Gs"},{"type":"output","id":"Et1Hlwt9WA9lwkh625IbJ","data":[],"key":"CzdRDX2fAJ"}],"key":"GuANW6yxVt"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Combined Radar Estimated Rainfall Product","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"u9Q1L0dSjk"}],"identifier":"combined-radar-estimated-rainfall-product","label":"Combined Radar Estimated Rainfall Product","html_id":"combined-radar-estimated-rainfall-product","implicit":true,"key":"fL4TEStIub"}],"key":"PwkXsE4SQA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"radar.fields[\"rain_z\"][\"data\"].mask","key":"EXu4QDBTBG"},{"type":"output","id":"MEj1cpLH7KWjcx4DnW9xG","data":[],"key":"i01stQHfP0"}],"key":"FXMImjjeKx"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"combined_data = np.where(~radar.fields[\"rain_z\"][\"data\"].mask, radar.fields[\"rain_z\"][\"data\"], radar.fields[\"rain_kdp\"][\"data\"])\n# Combine the masks using logical OR (mask where either is masked)\ncombined_mask = np.ma.mask_or(radar.fields[\"rain_z\"][\"data\"].mask, radar.fields[\"rain_kdp\"][\"data\"].mask)\n\n# Merge data and apply the combined mask\nmerged = np.ma.array(combined_data, mask=combined_mask)","key":"UWqIqkR3MT"},{"type":"output","id":"YNhpXSxYkB1P8mmuAeael","data":[],"key":"BKazrRVLMT"}],"key":"Yc0EClxLnz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"combined_data","key":"ycN9RrTQ6f"},{"type":"output","id":"N4pLWTZA6F4h-fYrFuStf","data":[],"key":"UwgzC8f1l9"}],"key":"bXnOKy4hlQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# define the dictionary structure for the rain rate data\nrain = pyart.config.get_metadata(\"radar_estimated_rain_rate\")\nrain[\"long_name\"] = \"R(Z+KDP) Radar Estimated Rain Rate\"\nrain[\"standard_name\"] = \"R(Z+KDP) Radar Estimated Rain Rate\"\nrain[\"data\"] = combined_data\n# add the field back into the radar object\nradar.add_field(\"rain_combined\", rain)","key":"M9zFcIcNP5"},{"type":"output","id":"Ld6q5Rc9OSFMpAzjNBZrH","data":[],"key":"NSFy7tYKTN"}],"key":"AYMJg8y5SC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"display = pyart.graph.RadarDisplay(radar)\n# Generate matplotlib figure and axe array objects\nfig, axarr = plt.subplots(1, 2, figsize=[14, 5])\nplt.subplots_adjust(wspace=0.2, hspace=0.35)\n\n# reflectivity\ndisplay.plot('rain_combined', sweep=0, ax=axarr[0], cmap='ChaseSpectral', vmax=10)\n# reflectivity\ndisplay.plot('reflectivity', sweep=0, ax=axarr[1], cmap='ChaseSpectral')","key":"TaCOkS65CP"},{"type":"output","id":"mHeH3_heqeZZpia-KxNKJ","data":[],"key":"RCYUmqZEGZ"}],"key":"SmTUuyv1Cc"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Create a Gridded QPE Product for Future Comparison with Model/MRMS","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FxlSpNiY98"}],"identifier":"create-a-gridded-qpe-product-for-future-comparison-with-model-mrms","label":"Create a Gridded QPE Product for Future Comparison with Model/MRMS","html_id":"create-a-gridded-qpe-product-for-future-comparison-with-model-mrms","implicit":true,"key":"IFQWhlmo4z"}],"key":"ioCdZhQu6G"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def bnf_grid(radar, \n             z_limits=(250., 15_000.), \n             y_limits=(-30_000., 30_000), \n             x_limits=(-30_000., 30_000),\n             resolution=250\n):\n    \"\"\"\n    Function to create a Py-ART grid object from a given radar file\n\n    Inputs\n    ------\n    radar : Py-ART radar object\n        Py-ART radar object to create a grid object from\n    z_limits : tuple\n        vertical dimension grid limits\n    y_limits : tuple\n        longitude dimension grid limits\n    x_limits : tuple\n        latitude dimension grid limits\n    resolution : float\n        desired resolution of our grid object\n\n    Calls\n    -----\n    compute_number_of_points\n        compute number of gates in each direction\n\n    Outputs\n    -------\n    grid : Py-ART Grid object\n    \"\"\"\n    def compute_number_of_points(extent, resolution):\n        return int((extent[1] - extent[0])/resolution)\n\n    z_grid_points = compute_number_of_points(z_limits, resolution)\n    x_grid_points = compute_number_of_points(x_limits, resolution)\n    y_grid_points = compute_number_of_points(y_limits, resolution)\n\n    grid = pyart.map.grid_from_radars([radar],\n                                      grid_shape=(z_grid_points,\n                                                  y_grid_points,\n                                                  x_grid_points),\n                                      grid_limits=(z_grid_limits,\n                                                   y_grid_limits,\n                                                   x_grid_limits),\n    )\n\n    return grid","key":"wUa5lZ05u4"},{"type":"output","id":"2Bd3R9eScwao13iKJzfWA","data":[],"key":"tQj5RKrKym"}],"key":"Xrn4rKrWVf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"grid = bnf_grid(radar)","key":"gfv2Wcq2Mw"},{"type":"output","id":"PkCxRYi70VUf5KMJWi5mC","data":[],"key":"rFW9bOKv0Q"}],"key":"Vbi1uTe43F"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"display = pyart.graph.GridMapDisplay(grid)\ndisplay.plot_grid('rain_combined',\n                  level=1,\n                  vmin=0.1,\n                  vmax=15,\n                  cmap='HomeyerRainbow')","key":"vwcZF7RQ8D"},{"type":"output","id":"FbXGcDJpYPp3cNQedhR4Y","data":[],"key":"hjRS9hYToi"}],"key":"p0xDAjsIqu"}],"key":"D1XVTAyMUW"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Py-ART Corrections","url":"/foundations/pyart/pyart-corrections","group":"Radar Data with Py-ART"},"next":{"title":"ACT Basics with BNF","url":"/foundations/act/act-basics-bnf","group":"Timeseries Data with ACT"}}},"domain":"http://localhost:3000"}